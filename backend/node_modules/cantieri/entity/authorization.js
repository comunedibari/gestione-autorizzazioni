/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var entTemp = require(process.cwd()+"/../lib/entityTemplate").entityTemplate;
var util = require("util");
var self = {};
var fs = require("fs");

var mailer = require("nodemailer");
var _smtp = null;

var emConfig = require("config/emConf.json");

var authorization = function()
{
  authorization.super_.call(this);

  this.moduleName = "Entity authorization";
  this.entityName = "authorization";
  this.tableName = "authorization";
  this.schemaName = "public"

  this.fieldTypeObj = {
    start_date: this.crudUtils.TIMESTAMP,
    end_date: this.crudUtils.TIMESTAMP
  };

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;
}

/*
 * Inheritance.
 */
util.inherits(authorization,entTemp);

authorization.prototype.init = function(opt)
{
  self = this;

  // create SMTP transport reading configuration
  _smtp = mailer.createTransport(emConfig.smtp);


  authorization.super_.prototype.init.call(self,opt);
}

authorization.prototype.insert = function(opt,callback)
{
  var insOpt =
  {
    object: opt.body || opt.object,
    sysuser_id: opt.sysuser_id
  };

  var authId = insOpt.object.authority_id;
  var authName = insOpt.object.name || null ;
  delete insOpt.object.name;
  var authEnabled =  (typeof insOpt.object.enabled  === 'boolean') ? insOpt.object.enabled : null;
  delete insOpt.object.enabled;

  authorization.super_.prototype.insert.call(self, insOpt, function(err,res)
  {
    if (err)
    {
      self.log.error(self.moduleName + " - Error on insert authorization  "+ err.message);

      callback(err,null);
      return;

    }

    if(opt.files && opt.files.length)
    {
      var optUpload = {
        entity_id: res.result.id,
        sysuser_id: opt.sysuser_id,
        files: opt.files
      };

      uploadAttach(optUpload, function(errAtt, resAtt)
      {
        if (errAtt)
        {
          self.log.error(self.moduleName + " - Error on upload attach  "+ errAtt.message);

          callback(errAtt,null);
          return;
        }

        if (authEnabled === false) // New insert from registration
        {
          var subject = "Richiesta autorizzazione azienda";
          var textMail = "L'azienda " + authName + " ha inviato/aggiornato la richiesta di iscrizione " +
          "alla piattaforma di gestione dei traslochi del comune di Bari. " +
          "Si prega di validare la suddetta richiesta.";
          var recipients = emConfig.smtp.move.admin;

          var mailOpt =
          {
            from: emConfig.smtp.from,
            to: recipients,
            subject: subject,
            text: textMail
          };

          self.log.info(self.moduleName+" - Sending mail to change authorization ");

          _smtp.sendMail(mailOpt,function(mErr,mRes)
          {
            if (mErr)
            {
              self.log.error(self.moduleName+" - Cannot send mail to change authorization "+mErr.message);
              return;
            }

            callback(null, res);
          });
        }
        else  //New insert from update authorization
        {
          // Disable authority
          var authOpt =
          {
            id: authId,
            object: {enabled:false},
            sysuser_id: opt.sysuser_id
          };

          var authority = self.entityHolder.getEntity("authority");

          authority.update(authOpt, function(authErr,authRes)
          {
            if (authErr)
            {
              self.log.error(self.moduleName + " - Error on disable authority  "+ authErr.message);

              callback(authErr,null);
              return;
            }

            var subject = "Richiesta autorizzazione azienda";
            var textMail = "L'azienda " + authRes.result.name + " ha inviato/aggiornato la richiesta di iscrizione " +
            "alla piattaforma di gestione dei traslochi del comune di Bari. " +
            "Si prega di validare la suddetta richiesta.";
            var recipients = emConfig.smtp.move.admin;

            var mailOpt =
            {
              from: emConfig.smtp.from,
              to: recipients,
              subject: subject,
              text: textMail
            };

            self.log.info(self.moduleName+" - Sending mail to change authorization ");

            _smtp.sendMail(mailOpt,function(mErr,mRes)
            {
              if (mErr)
              {
                self.log.error(self.moduleName+" - Cannot send mail to change authorization "+mErr.message);
                return;
              }

              callback(null, res);
            });

          });
        }
      });
    }
    else
    {
      if (authEnabled === false) // New insert from registration
        {
          var subject = "Richiesta autorizzazione azienda";
          var textMail = "L'azienda " + authName + " ha inviato/aggiornato la richiesta di iscrizione " +
          "alla piattaforma di gestione dei traslochi del comune di Bari. " +
          "Si prega di validare la suddetta richiesta.";
          var recipients = emConfig.smtp.move.admin;

          var mailOpt =
          {
            from: emConfig.smtp.from,
            to: recipients,
            subject: subject,
            text: textMail
          };

          self.log.info(self.moduleName+" - Sending mail to change authorization ");

          _smtp.sendMail(mailOpt,function(mErr,mRes)
          {
            if (mErr)
            {
              self.log.error(self.moduleName+" - Cannot send mail to change authorization "+mErr.message);
              return;
            }

            callback(null, res);
          });
      }
      else  //New insert from update authorization
      {
        // Disable authority
        var authOpt =
        {
          id: authId,
          object: {enabled:false},
          sysuser_id: opt.sysuser_id
        };

        var authority = self.entityHolder.getEntity("authority");

        authority.update(authOpt, function(authErr,authRes)
        {
          if (authErr)
          {
            self.log.error(self.moduleName + " - Error on disable authority  "+ authErr.message);

            callback(authErr,null);
            return;
          }

          var subject = "Richiesta autorizzazione azienda";
          var textMail = "L'azienda " + authRes.result.name + " ha inviato/aggiornato la richiesta di iscrizione " +
          "alla piattaforma di gestione dei traslochi del comune di Bari. " +
          "Si prega di validare la suddetta richiesta.";
          var recipients = emConfig.smtp.move.admin;

          var mailOpt =
          {
            from: emConfig.smtp.from,
            to: recipients,
            subject: subject,
            text: textMail
          };

          self.log.info(self.moduleName+" - Sending mail to change authorization ");

          _smtp.sendMail(mailOpt,function(mErr,mRes)
          {
            if (mErr)
            {
              self.log.error(self.moduleName+" - Cannot send mail to change authorization "+mErr.message);
              return;
            }

            callback(null, res);
          });

        });
      }
    }
  });
}
/*
 * Export.
 */
exports.authorization = authorization;

/*
 * New methods
 */
// retrieve authorization history for given authority
authorization.prototype.getHistory = function(opt,callback)
{
  /*
   * Query to execute:
   *
   * SELECT *
   * FROM authorization AS
   * WHERE authority_id = $1
   * ORDER BY id DESC
   *
   */
  var queryOpt =
  {
    fields: self.crudUtils.ALL_FIELDS,
    fieldType: {
      start_date: self.crudUtils.TIMESTAMP,
      end_date: self.crudUtils.TIMESTAMP
    },
    from: [{name:"public.authorization", type:self.crudUtils.TABLE}],
    where: [
      {
        typeCond: self.crudUtils.SIMPLE_COND,
        leftSide: "authority_id",
        operator: self.crudUtils.EQ,
        rightSide: "$1"
      }
    ],
    ordering: [{field: "id", orderType: self.crudUtils.DESC}]
  };

  // adding return options if presents
  if (opt.returnOption)
  {
    queryOpt.returnOption = opt.returnOption;
  }

  var queryVal = [
    {value: opt.id}
  ];

  self.crud.select(queryOpt,queryVal,function(err,res)
  {
    if (err || !res)
    {
      self.log.error(self.moduleName + " - Error on authorization history for authority " + opt.id);
    }

    callback(err,res);
  });
}


/*
 * Private methods
 */

// manage authorization attach upload
function uploadAttach(params,callback)
{
  var file = params.files ? params.files[0] : null;
  var entityId = params.entity_id;
  var uploadDir = self.attachment.path;

  if (!file || entityId == null || !uploadDir)
  {
    var errMsg = "Missing parameters";

    self.log.error(self.moduleName + " - Upload error: " + errMsg);
    return callback({message: errMsg},null);
  }

  /* Move uploaded file into entity dir */
  var dir = uploadDir+"/"+self.entityName;
  var filename = dir+"/"+entityId+"_"+file.originalname;

  if (params.oldFilename)
  {
    // Remove old file
    fs.unlink(dir+"/"+entityId+"_"+params.oldFilename,function(unlErr){});
  }

  // Look for entity dir
  if (!fs.existsSync(dir))
  {
    try {fs.mkdirSync(dir);}
    catch (err)
    {
      self.log.error(self.moduleName + " - Upload error: " + err.message);
      return callback(err,null);
    }
  }

  // Move file
  fs.rename(file.path,filename,function(err)
  {
    if (err)
    {
      var errMsg = "Cannot move file";

      self.log.error(self.moduleName + " - Upload error: " + errMsg);
      return callback({message: errMsg},null);
    }

    callback(err,filename);

  });
}
