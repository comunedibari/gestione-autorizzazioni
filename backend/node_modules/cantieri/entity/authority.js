/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var entTemp = require(process.cwd()+"/../lib/entityTemplate").entityTemplate;
var util = require("util");
var async = require("async");
var self = {};

var authority = function()
{
  authority.super_.call(this);

  this.moduleName = "Entity authority";
  this.entityName = "authority";
  this.tableName = "authority";

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;

  this.hasLogicalDelete = true;

  this.retFieldObj = [
    {name: "id"},
    {name: "name"},
    {name: "enabled"},
    {name: "email"}
  ];
}

/*
 * Inheritance.
 */
util.inherits(authority,entTemp);

authority.prototype.init = function(opt)
{
  self = this;
  authority.super_.prototype.init.call(self,opt);
}

authority.prototype.detail = function(opt,callback)
{
  authority.super_.prototype.detail.call(self,opt,function(err,res)
  {
    if (err || !res || !res.result || !res.result.id)
    {
      callback(err,res);
      return;
    }

     /* Get authorization for given authority */
    var query = "SELECT  *  FROM public.authorization WHERE (authority_id = $1) " +
    "ORDER BY id DESC limit 1";

    var qVal = [{value: res.result.id}];

    self.crud.select({queryString: query},qVal,function(aErr,aRes)
    {
      if (!aErr)
        res.result.authorization = aRes.result[0];

      var authorization = self.entityHolder.getEntity("authorization");

      authorization.getHistory({id:res.result.id}, function(histErr, histRes)
      {
        if (!histErr)
        {
          res.result.authorizationHistory = histRes.result;
        }

        callback(err,err ? null : res);
      });
    });
  });
}

authority.prototype.insert = function(opt,callback)
{
  // Retrieve geom of Bari
  var query = "SELECT * FROM gis_data.bari " ;

  // Exec query
  self.crud.select({queryString:query},[],function(err, res)
  {
    if (err)
    {
      self.log.error(self.moduleName + " - Error on get geom  "+ err.message);
      return callback(err, null);
    }

    var geom = res.result[0].geom;

    // Add geom on opt.object
    opt.object.geom = geom;
    authority.super_.prototype.insert.call(self,opt,callback);
  });

}

authority.prototype.update = function(opt,callback)
{
  authority.super_.prototype.update.call(self,opt,function(errU, resU)
  {
    callback(errU, resU);

    if (opt.object.hasOwnProperty("enabled") && opt.object.enabled)
    {
      var mailOpt =
      {
        result:{name: resU.result.name, email:resU.result.email}
      }
      // Send  enabled authority mail
      sendEnabledAuthorityMail(mailOpt,function(errMail)
      {
        if (errMail)
          self.log.error(self.moduleName+
            " - send enabled authority mail error: "+
            errMail.message);
      });
    }
  });

}

/*
 * New methods
 */

/*
 * Private methods
 */

// send email to user to tell that it has been enabled
function sendEnabledAuthorityMail(authObj, callback)
{
  var jsonMailCfg =
  {
    to: authObj.result.email,
    subject: self.env.appName + " - Notifica abilitazione di accesso al sistema",
    text: "Buongiorno,\n\n"+
          "l'azienda "+ authObj.result.name +" è stata autorizzata dall'uffici competenti.\n\n" +
          "Saluti,\n\n"+
          "Staff amministrazione.\n\n\n\n\n"+
          "-- Questa e-mail è generata automaticamente dal portale GESTIONALE AUTORIZZAZIONI, " +
          "si prega di non rispondere direttamente a questa e-mail. --"
  }

  self.mailer.sendMail(jsonMailCfg,function(err)
  {
    return callback(err);
  });
}

 /*
 * Export.
 */
exports.authority = authority;
