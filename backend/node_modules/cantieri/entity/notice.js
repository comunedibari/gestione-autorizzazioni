/*
 *    Date: 2022 11 29
 *  Author: Catiana
 * Project: Nodas - EntityManager
 *
 * Copyright 2018 SIT srl
 */

var entTemp = require(process.cwd()+"/../lib/entityTemplate").entityTemplate;
var util = require("util");
var async = require("async");
var self = {};

var rlConfig   = require("config/rleConf.json");
var emConfig = require("config/emConf.json");

var notice = function()
{
  notice.super_.call(this);

  this.moduleName = "Entity notice";
  this.entityName = "notice";
}

/*
 * Inheritance
 */
util.inherits(notice,entTemp);

notice.prototype.init = function(opt)
{
  self = this;
  notice.super_.prototype.init.call(self,opt);
}

notice.prototype.master = function(opt,callback)
{
  var tasks = {};
  /*
  * Query to execute
  *
  * SELECT *
  * FROM view_roadsite / view_move
  * WHERE TO_CHAR(now(), 'DD/MM/YYYY') = to_char((date(protocol_approved_date/approved_date) + interval '<interval> hour'), 'DD/MM/YYYY')
  * AND status_id = 3
  */

  var qStrR = "SELECT * " +
    "FROM view_roadsite vr " +
    "WHERE TO_CHAR(now(), 'DD/MM/YYYY') = to_char((date(protocol_approved_date) + interval '" +
    rlConfig.noticeInterval + " hour'), 'DD/MM/YYYY') " +
    "AND status_id = 3 AND (sended is false OR sended is null)";

  tasks['roadsite'] = function(cb){self.crud.select({queryString:qStrR}, [], cb);};


  var qStrM = "SELECT * " +
    "FROM view_move vm " +
    "WHERE TO_CHAR(now(), 'DD/MM/YYYY') = to_char((date(approved_date) + interval '" +
    rlConfig.noticeInterval + " hour'), 'DD/MM/YYYY') " +
    "AND status_id = 3 AND (sended is false OR sended is null)";

  tasks['move'] = function(cb){self.crud.select({queryString:qStrM}, [], cb);};

  // execute tasks
  async.parallelLimit(tasks,1,function(errT,resT)
  {
    var tasksPN = {};
    if (resT['roadsite'] && resT['roadsite'].result && resT['roadsite'].result.length)
    {
      for (var idxR=0; idxR<resT['roadsite'].result.length; idxR++)
      {
        var itemR = resT['roadsite'].result[idxR];
        var noticeRoadsiteOpt =
        {
          id:itemR.id,
          towns: itemR.town,
          address: itemR.address,
          authority: itemR.authority,
          start_date: itemR.start_date,
          end_date: itemR.end_date
        }
        createPrepareNoticeTask(tasksPN, idxR, noticeRoadsiteOpt, 'roadsite');
      }
    }
    if (resT['move'] && resT['move'].result && resT['move'].result.length)
    {

      for (var idxM=0; idxM<resT['move'].result.length; idxM++)
      {
        var itemM = resT['move'].result[idxM];
        var noticeMoveOpt =
        {
          id:itemM.id,
          towns: itemM.town,
          address: itemM.address,
          authority: itemM.authority,
          start_date: itemM.start_date,
          end_date: itemM.end_date
        }
        createPrepareNoticeTask(tasksPN, idxM, noticeMoveOpt, 'move');
      }
    }
    async.parallelLimit(tasksPN,1,function(errTPrepareNotice,resTPrepareNotice)
    {
      // console.log(resTPrepareNotice);
      callback(null, resTPrepareNotice);
    });

  });

}

/*
 * New methods
 */


/*
 * Export
 */
exports.notice = notice;

/*
 * Private function
 */
function createPrepareNoticeTask(tasks,index,option,table)
{
  tasks["prepare-notice-"+table+"-"+index] = function(cb){preparePushToSendToApp(option,table, function(res)
    {
      cb(null,res);
    });};
}

function preparePushToSendToApp(op,tableToUpdate,callback)
{
  // Retrieve id for given towns
  var id = op.id;
  var towns = op.towns;
  var address = op.address;
  var start_date = op.start_date*1;
  var end_date = op.end_date*1;

  var options = {
    id:id,
    address:address,
    start_date:start_date,
    end_date:end_date
  }

  var aTowns = [];
  queryVal = [];

  for (var idx = 0; idx < towns.split(";").length; idx++)
  {
    aTowns.push("'" + towns.split(";")[idx] + "'");
  }

  /*
   * Query to execute:
   *
   * SELECT *
   * FROM tows_ids
   * WHERE id = $1
   *
   */
  var queryOpt =
  {
    fields: self.crudUtils.ALL_FIELDS,
    from: [{name:"public.town_ids", type:self.crudUtils.TABLE}],
    where: [
      {
        typeCond: self.crudUtils.SIMPLE_COND,
        leftSide: "name",
        operator: self.crudUtils.IN,
        rightSide: aTowns.join()
      }
    ]
  };

  self.crud.select(queryOpt,queryVal,function(err,res)
  {
    if (err || !res)
    {
      self.log.error(self.moduleName + " - Error on retrieve ids for town " + towns);

      callback(err)
      return;
    }

    if (res && res.result)
    {
      var tasksN = {};

      for (var idxT=0; idxT<res.result.length; idxT++)
      {
        createNoticeTask(options,tasksN,idxT,res.result[idxT].id,tableToUpdate);
      }
    }

    async.parallelLimit(tasksN,1,function(errTNotice,resTNotice)
    {
      // console.log(resTNotice);
      callback(null, resTNotice);
    });

  });
}

function createNoticeTask(options,tasks,index,townId,table)
{
  tasks["notice-"+table+"-"+index] = function(cb){sendPushToApp(options,townId, table, function(res)
  {
    cb(null,res);
  });};
}

function sendPushToApp(options,town,tableToUpdate,callback){

  var auth = "Basic " + new Buffer(emConfig.push.username + ":" + emConfig.push.password).toString("base64");

  var token = emConfig.push.token;

  // Prepare post to send push
  var httpOpt = {
    host: emConfig.push.url,
    path: emConfig.push.path,
    port: 443,
    method: "POST",
    //headers: {"Authorization" : auth,"Content-Type":"application/json", 'authorizationToken': token }
    headers: {"Content-Type":"application/json", 'authorizationToken': token }
  };

  var start_date = new Date(options.start_date);

  var s_year = start_date.getFullYear(),
  s_mon = ("0" + (start_date.getMonth()+1)).slice(-2),
  s_day = ("0" + start_date.getDate()).slice(-2);

  var start_complete_date =  s_day + "/" + s_mon + "/" + s_year;

  var end_date = new Date(options.end_date);

  var e_year = end_date.getFullYear(),
  e_mon = ("0" + (end_date.getMonth()+1)).slice(-2),
  e_day = ("0" + end_date.getDate()).slice(-2);

  var end_complete_date =  e_day + "/" + e_mon + "/" + e_year;

  var text = "In " +  options.address + " è stato autorizzato un nuovo ";
  text += tableToUpdate == 'move' ? "trasloco " : "cantiere ";
  text += "dal " + start_complete_date + " al " + end_complete_date + ". ";
  text += "Tale periodo è indicativo e può essere oggetto di modifica."
//   var text = "Il giorno " + complete_date + " sara' attivo un nuovo ";
//   text += tableToUpdate == 'move' ? "trasloco" : "cantiere";
//   text += " in " + options.address;

  var subject =  tableToUpdate == 'move' ? "Autorizzazione nuovo trasloco" : "Autorizzazione nuovo cantiere";

  var structureId = tableToUpdate == 'move' ? -4 : -5;

  var groupId = town;

  var notice = {
    "additionalInfo": "{\"groupId\":" + groupId +", \"articleId\": " + options.id + ", \"structureId\":" + structureId +"}",
    "channel": "push",
    "id": "",
    "subject": subject,
    "text": text,
    "to": [
      {
        "appName": "BARINFORMA",
        "osId": 0,
        "type": "push"
      }
    ]
  }

  //console.log(notice);

  self.log.info(self.moduleName + " - Body: "+JSON.stringify(notice));

  self.httpClient.req(httpOpt,JSON.stringify(notice),function(resPush)
  {
    self.log.info(self.moduleName + " - Response send push notice: "+resPush);

    if (resPush)
    {
      resPush = JSON.parse(resPush);

      var retVal = resPush.hasOwnProperty("error") ? "KO" : "OK";

      if (retVal == "OK")
      {
        // Update sended
        var qOpt = {
          table: {name:tableToUpdate, type:self.crudUtils.TABLE},
          fields: [{name:"sended"}],
          where: [{
            typeCond: self.crudUtils.SIMPLE_COND,
            leftSide: "id",
            operator: self.crudUtils.EQ,
            rightSide: "$2"
          }],
          returning: [
            {name: "id"}
          ]
        };

        qVal = [{value:true},{value:options.id}];

        self.crud.update(qOpt, qVal, function(errU,resU)
        {
          if(resU && resU.result && resU.result.length)
          {
            self.log.info(self.moduleName+" - Update sended attribute for " + tableToUpdate + " with id " + options.id);
          }
          else
          {
            self.log.error(self.moduleName+" - Error on update sended attribute for " + tableToUpdate + "  with id " + options.id);
          }

          callback({result:retVal});
        });
      }
      else
      {
        self.log.error(self.moduleName + " - Error on send push notice: "+JSON.stringify(resPush));
        callback({result:"KO"});
      }
    }
    else
    {
      self.log.error(self.moduleName + " - Error on send push notice: "+resPush);
      callback({result:"KO"});
    }
  });

}