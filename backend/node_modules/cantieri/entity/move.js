/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var entTemp = require(process.cwd()+"/../lib/entityTemplate").entityTemplate;
var util = require("util");
var self = {};

var mailer = require("nodemailer");
var _smtp = null;

var emConfig = require("config/emConf.json");

var STATUS_APPROVE = 3;
var STATUS_REJECT = 4;

var move = function()
{
  move.super_.call(this);

  this.moduleName = "Entity move";
  this.entityName = "move";
  this.tableName = "move";
  this.tableSrid = 32633;

  this.fieldTypeObj = {
    request_date: this.crudUtils.TIMESTAMP,
    start_date: this.crudUtils.TIMESTAMP,
    end_date: this.crudUtils.TIMESTAMP,
    signage_date: this.crudUtils.TIMESTAMP,
    control_date: this.crudUtils.TIMESTAMP,
    manage_date: this.crudUtils.TIMESTAMP,
    approved_date: this.crudUtils.TIMESTAMP
  };

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;
  this.attachTableName = "move_attach";

  this.retFieldObj = [
    {name: "id"},
    {name: "status_id"},
    {name: "authority_id"},
    {name: "email"},
    {name: "start_date"},
    {name: "address"},
    {name: "town"}
  ];
}

/*
 * Inheritance.
 */
util.inherits(move,entTemp);

move.prototype.init = function(opt)
{
  self = this;

  // create SMTP transport reading configuration
  _smtp = mailer.createTransport(emConfig.smtp);

  move.super_.prototype.init.call(self,opt);
}

move.prototype.count = function(opt,callback)
{
  opt.tableName = "view_move";

  move.super_.prototype.count.call(self, opt, callback);
}

move.prototype.master = function(opt,callback)
{
  // configure query object to return bounding box of geom
  // (geom can be point, line or polygon)
  var qOpt = {
    fields: [
      {name:"id"},
      {name:"authority_id"},
      {name:"open_user_id"},
      {name:"authority"},
      {name:"open_user"},
      {name:"request_date"},
      {name:"status_id"},
      {name:"address"},
      {name:"town"},
      {name:"start_date"},
      {name:"end_date"},
      {name:"ST_Xmin(ST_Buffer(geom,10))", aliasF:"x_min"},
      {name:"ST_Ymin(ST_Buffer(geom,10))", aliasF:"y_min"},
      {name:"ST_Xmax(ST_Buffer(geom,10))", aliasF:"x_max"},
      {name:"ST_Ymax(ST_Buffer(geom,10))", aliasF:"y_max"}
    ],
    fieldType: {request_date: self.crudUtils.TIMESTAMP, start_date: self.crudUtils.TIMESTAMP,
      end_date: self.crudUtils.TIMESTAMP},
    from: [{name:"view_move", type:self.crudUtils.TABLE}]
  };

  opt.queryOpt = qOpt;
  opt.queryVal = [];

  move.super_.prototype.master.call(self, opt, callback);
}

move.prototype.detail = function(opt,callback)
{
  opt.tableName = "view_move";

  move.super_.prototype.detail.call(self, opt,function(errDet, resDet)
  {
    // Check if move have photo attach
    // we return them into entity detail

    /*
      * SELECT * FROM move_photo WHERE entity_id = <id>
      */
    var attachQueryOpt = {
      queryName: "retrieveMovePhoto",
      fields: self.crudUtils.ALL_FIELDS,
      fieldType: {insert_date: self.crudUtils.TIMESTAMP},
      from: [{
        name: "move_photo",
        type: self.crudUtils.TABLE
      }],
      where: [{
        typeCond: self.crudUtils.SIMPLE_COND,
        leftSide: "entity_id",
        operator: self.crudUtils.EQ,
        rightSide: "$1"
      }]
    };

    // execute select on entity attach table
    self.crud.select(attachQueryOpt, [{value:resDet.result.id}], function(aErr,aRes)
    {
      if (aErr)
        self.log.error(self.moduleName +
          " - Retrieve photo list query error: " + aErr);
      else
        // add attachment list to entity detail
        resDet.result.photo = aRes.result;

      callback(null, resDet);
    });

  });
}

move.prototype.insert = function(opt,callback)
{
  move.super_.prototype.insert.call(self,opt,function(err,res)
  {
    callback(err,res);

    if (res)
    {
      self.eventSender.postEvent({
        message: "Inserimento trasloco",
        source: "EntityManager",
        type: "refreshMap",
        detail: {
          id: res.result.id,
          sio_id: opt.sio_id,
          layerName: ["view_traslochi_aperti"]
        }
      });
    }
  });
}

move.prototype.update = function(opt,callback)
{
  var sendMail = opt.object.send_mail ? true : false;
  delete opt.object.send_mail;

  move.super_.prototype.update.call(self,opt,function(err,res)
  {
    callback(err,res);

    if (res)
    {
      self.eventSender.postEvent({
        message: "Aggiornamento trasloco",
        source: "EntityManager",
        type: "refreshMap",
        detail: {
          id: res.result.id,
          sio_id: opt.sio_id,
          layerName: ["view_traslochi_aperti"]
        }
      });

      // Send mail
      if (!err && res && res.result && sendMail)
      {
        /* Retrieve detail authority */
        var query = "SELECT  *  FROM public.authority WHERE (id = $1) ";

        var qVal = [{value: res.result.authority_id}];

        self.crud.select({queryString: query},qVal,function(aErr,aRes)
        {
          var authority = aRes.result[0].name;
          var address = res.result.address;
          var startDate = new Date(res.result.start_date);



          var year = startDate.getFullYear(),
            mon = ("0" + (startDate.getMonth()+1)).slice(-2),
            day = ("0" + startDate.getDate()).slice(-2);

          var statDateString = day + "/" + mon + "/" + year;
          var subject = null;
          var textMail = null;
          var recipients = null;

          switch(res.result.status_id)
          {
            case 1:
              subject = "AUTOCERTIFICAZIONE RICHIESTA TRASLOCO";
              textMail = "La richiesta di autorizzazione al trasloco" +
              " in via " + address + " con data di inizio " + statDateString +
              " per conto di " + authority.toUpperCase() +
              " è stata inviata.\n\n\n\n\n"+
              "-- Questa e-mail è generata automaticamente dal portale GESTIONALE AUTORIZZAZIONI, " +
              "si prega di non rispondere direttamente a questa e-mail. --";
              recipients = [emConfig.smtp.move.admin,res.result.email].join();
              break;

            case 2:
              subject = "PRESA IN CARICO TRASLOCO";
              textMail = "La richiesta di autorizzazione al trasloco" +
              " in via " + address + " con data di inizio " + statDateString +
              " per conto di " + authority.toUpperCase() +
              " è stata presa in carico dalla sala operativa.\n\n\n\n\n"+
              "-- Questa e-mail è generata automaticamente dal portale GESTIONALE AUTORIZZAZIONI, " +
              "si prega di non rispondere direttamente a questa e-mail. --";
              recipients = res.result.email;
              break;

            case 3:
              subject = "AUTORIZZAZIONE TRASLOCO";
              textMail = "La richiesta di autorizzazione al trasloco" +
              " in via " + address + " con data di inizio " + statDateString +
              " per conto di " + authority.toUpperCase() +
              " è stata autorizzata.\n\n\n\n\n"+
              "-- Questa e-mail è generata automaticamente dal portale GESTIONALE AUTORIZZAZIONI, " +
              "si prega di non rispondere direttamente a questa e-mail. --";
              recipients = res.result.email;
              break;

            case 4:
              subject = "DINIEGO TRASLOCO";
              textMail = "La richiesta di autorizzazione al trasloco" +
              " in via " + address + " con data di inizio " + statDateString +
              " per conto di " + authority.toUpperCase() +
              " è stata negata. Per ulteriori dettagli consultare il portale.\n\n\n\n\n"+
              "-- Questa e-mail è generata automaticamente dal portale GESTIONALE AUTORIZZAZIONI, " +
              "si prega di non rispondere direttamente a questa e-mail. --";
              recipients = res.result.email;
              break;
          }

          var mailOpt =
          {
            from: emConfig.smtp.from,
            to: recipients,
            subject: subject,
            text: textMail
          };

          self.log.info(self.moduleName+" - Sending mail for request move");

          _smtp.sendMail(mailOpt,function(mErr,mRes)
          {
            if (mErr)
            {
              self.log.error(self.moduleName+" - Cannot send mail "+mErr.message);
              return;
            }
          });
        });

      }
    }
  });
}

move.prototype.delete = function(opt,callback)
{
  move.super_.prototype.delete.call(self,opt,function(err,res)
  {
    callback(err,res);

    if (res)
    {
      self.eventSender.postEvent({
        message: "Cancellazione trasloco",
        source: "EntityManager",
        type: "refreshMap",
        detail: {
          id: res.result.id,
          sio_id: opt.sio_id,
          layerName: ["view_traslochi_aperti"]
        }
      });
    }
  });
}

/*
 * Export.
 */
exports.move = move;

/*
 * New methods
 */


/*
 * Private methods
 */


