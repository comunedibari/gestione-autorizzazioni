/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var ModuleName = "shpManager";

/* Module variable */
var _config = require("config/config.json");
var fs      = require("fs");
var stream  = require("stream").Stream;
var toJSON  = require('shp2json');

var _log = null;

/*
 * Public function
 */
function init(log)
{
  _log = log;
}

/*
 * Function that receive a zip file, check that is a valid shapefile and return corresponding geoJson
 *
 * opt.file  -> zip file
 * opt.multi -> boolean that indicate if shape could contain many geometries
 * opt.geomType -> geometry type expected; null if expected any geometry type
 *
 */
function readShp(opt, callback)
{
  if (!opt.file)
  {
    _log.error(ModuleName + " - missing file!");
    return callback({message:1},null);
  }

  // read uploaded file
  var inStream = fs.createReadStream(opt.file.path, {flags:'r'});

  inStream.on('error', function()
  {
    _log.error(ModuleName + " - error on opening loaded data!");

    // Remove uploaded file
    fs.unlink(opt.file.path,function(unlErr){});
    return callback({message:2},null);
  });

  if (inStream)
  {
    var outStream = new stream;
    outStream.writable = true;

    var data = '';

    outStream.write = function (buf)
    {
      data += buf;
    };

    outStream.end = function ()
    {
      var geoJson = null;

      try
      {
        geoJson = JSON.parse(data);
      }
      catch(e)
      {
        _log.error(ModuleName + " - error on json parsing data: " + e.message);
        return callback({message: 6},null);
      }

      var geom = null;

      // shp2json module create a FeatureCollection geoJson
      // and convert geometries into 4326 srid
      // reading features attribute
      if (geoJson && geoJson.features)
      {
        // is expected that shapefile contains only 1 geometry
        if (!opt.multi)
        {
          // check if shapefile contains more than one geometry
          if (geoJson.features.length > 1)
          {
            _log.error(ModuleName +
              " - loaded shapefile contains more than 1 geometry!");

            // Remove uploaded file
            fs.unlink(opt.file.path,function(unlErr){});
            return callback({message:3},null);
          }

          geom = geoJson.features[0].geometry;
        }
        else
        {
          _log.error(ModuleName + " - Not managed yet!!");
        }

        // check geometry type
        if (opt.geomType)
        {
          if (opt.geomType.substring(0,5) == "Multi")
          {
            // check geometry type
            // (only <type> and Multi<type> are permited)
            if (geom.type != opt.geomType.substring(5,opt.geomType.length) && geom.type != opt.geomType)
            {
              _log.error(ModuleName +
                " - loaded shapefile contains " + geom.type + " geometry!");

              // Remove uploaded file
              fs.unlink(opt.file.path,function(unlErr){});
              return callback({message:4},null);
            }

            // convert <type> to Multi<type> (to store geometry on db)
            if (geom.type == opt.geomType.substring(5,opt.geomType.length))
            {
              var coords = geom.coordinates;

              geom = {
                type:'Multi' + opt.geomType.substring(5,opt.geomType.length),
                coordinates: [coords]
              };
            }
          }
          else
          {
            // check geometry type
            // (only <type> is permited)
            if (geom.type != opt.geomType)
            {
              _log.error(ModuleName +
                " - loaded shapefile contains " + geom.type + " geometry!");

              // Remove uploaded file
              fs.unlink(opt.file.path,function(unlErr){});
              return callback({message:4},null);
            }
          }
        }

        // add crs
        if (geom && !geom.crs)
        {
          geom.crs = {properties:{name:"EPSG:4326"}};
        }

        return callback(null, {result:geom});
      }
      else
      {
        _log.error(ModuleName + " - Loaded data not contains feature attribute!");

        // Remove uploaded file
        fs.unlink(opt.file.path,function(unlErr){});
        callback({message:5},null);
      }
    };

    toJSON(inStream).on('error', function(e){
      _log.error(ModuleName + " - Error on parsing loaded data: ");

      // Remove uploaded file
      fs.unlink(opt.file.path,function(unlErr){});
      callback({message:6},null);
    })
    .pipe(outStream);

  }
}

/*
 * Exports
 */
exports.init = init;
exports.readShp = readShp;
