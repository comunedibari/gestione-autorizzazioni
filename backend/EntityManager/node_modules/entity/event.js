/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var entTemp = require("../../lib/entityTemplate").entityTemplate;
var util = require("util");
var self = {};

var event = function(schema)
{
  event.super_.call(this);

  this.moduleName = "Entity event";
  this.entityName = "event";
  this.schemaName = schema;
  this.tableName = "event";

  this.masterFieldObj = [
    {name:"id"},
    {name:"date"},
    {name:"type"},
    {name:"source"},
    {name:"message"},
    {name:"type_id"},
    {name:"group_id"},
    {name:"lat"},
    {name:"lon"}
  ];
  this.fieldTypeObj = {
    date: this.crudUtils.TIMESTAMP
  };

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;
}

/*
 * Inheritance
 */
util.inherits(event,entTemp);

event.prototype.init = function(opt)
{
  self = this;
  event.super_.prototype.init.call(self,opt);
}

event.prototype.count = function(opt,callback)
{
  opt.tableName = "view_event";

  event.super_.prototype.count.call(self,opt,callback);
}

event.prototype.master = function(opt,callback)
{
  opt.tableName = "view_event";

  event.super_.prototype.master.call(self,opt,callback);
}

event.prototype.detail = function(opt,callback)
{
  opt.tableName = "view_event";

  event.super_.prototype.detail.call(self,opt,callback);
}

event.prototype.insert = function(opt,callback)
{
  var obj = opt.object;

  // Check for event type
  if (!obj || !obj.type)
  {
    callback({message:"Event without type"},null);
    return;
  }

  // Get type id
  getTypeId(obj.type,function(typeId)
  {
    if (!typeId)
    {
      callback({message:"Cannot retrieve type id"},null);
      return;
    }

    // Update object to insert
    obj.type_id = typeId;
    delete obj.type;

    // Insert
    event.super_.prototype.insert.call(self,opt,callback);
  });
}

/*
 * Exports
 */
exports.event = event;

/*
 * Private function.
 */
function getTypeId(type,callback)
{
  var evTypeEnt = self.entityHolder.getEntity("eventType");
  if (!evTypeEnt)
  {
    callback(null);
    return;
  }

  // Try to get type id for given type
  var opt = {object: {filter: "name|EQ|"+type}};

  evTypeEnt.master(opt,function(err,res)
  {
    if (err)
    {
      callback(null);
      return;
    }

    // Look for existing event type
    if (res && res.result && res.result.length)
    {
      callback(res.result[0].id);
      return;
    }

    // Try to insert new event type
    opt.object = {name: type};

    evTypeEnt.insert(opt,function(iErr,iRes)
    {
      var retVal = null;

      if (!iErr && iRes && iRes.result)
        retVal = iRes.result.id;

      callback(retVal);
    });
  });
}
