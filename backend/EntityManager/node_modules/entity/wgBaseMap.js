/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var entTemp = require("../../lib/entityTemplate").entityTemplate;
var async = require("async");
var util = require("util");
var self = {};

var wgBaseMap = function(schema)
{
  wgBaseMap.super_.call(this);

  this.moduleName = "Entity wgBaseMap";
  this.entityName = "wgBaseMap";
  this.schemaName = schema;
  this.tableName = "wg_base_map";

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;

  this.retFieldObj = [{name:"id"},{name:"label"}];
}

/*
 * Inheritance.
 */
util.inherits(wgBaseMap,entTemp);

wgBaseMap.prototype.init = function(opt)
{
  self = this;
  wgBaseMap.super_.prototype.init.call(self,opt);
}

wgBaseMap.prototype.insert = function(opt,callback)
{
  var i18nObj = opt.object.i18n;
  var transName = "InsertBaseMap_" + new Date().getTime();

  delete opt.object.i18n;

  // Begin transaction
  self.crud.beginTransaction(transName,function(btErr)
  {
    if (btErr)
    {
      callback(btErr,null);
      return;
    }

    // Insert base map
    opt.transName = transName;

    wgBaseMap.super_.prototype.insert.call(self,opt,function(err,res)
    {
      if (err)
      {
        self.crud.rollbackTransaction(transName,function(rtErr){});
        callback(err,res);
        return;
      }

      // Insert i18n entry
      var i18nInsOpt = {
        sysuser_id: opt.sysuser_id,
        transName: transName,
        object: i18nObj
      };

      manageI18N(i18nInsOpt,"insert",function(i18nErr)
      {
        if (i18nErr)
        {
          self.crud.rollbackTransaction(transName,function(rtErr){});
          callback(i18nErr,null);
          return;
        }

        // Commit transaction
        self.crud.commitTransaction(transName,function(ctErr)
        {
          callback(ctErr,ctErr ? null : res);
        });
      });
    });
  });
}

wgBaseMap.prototype.update = function(opt,callback)
{
  var i18nObj = opt.object.i18n;
  var transName = "UpdateBaseMap_" + new Date().getTime();

  delete opt.object.i18n;

  // Begin transaction
  self.crud.beginTransaction(transName,function(btErr)
  {
    if (btErr)
    {
      callback(btErr,null);
      return;
    }

    // Update base map
    opt.transName = transName;

    wgBaseMap.super_.prototype.update.call(self,opt,function(err,res)
    {
      if (err)
      {
        self.crud.rollbackTransaction(transName,function(rtErr){});
        callback(err,res);
        return;
      }

      // Update i18n entry
      var i18nUpdOpt = {
        sysuser_id: opt.sysuser_id,
        transName: transName,
        object: i18nObj
      };

      manageI18N(i18nUpdOpt,"updateWoId",function(i18nErr)
      {
        if (i18nErr)
        {
          self.crud.rollbackTransaction(transName,function(rtErr){});
          callback(i18nErr,null);
          return;
        }

        // Commit transaction
        self.crud.commitTransaction(transName,function(ctErr)
        {
          callback(ctErr,ctErr ? null : res);
        });
      });
    });
  });
}

wgBaseMap.prototype.delete = function(opt,callback)
{
  var simple = opt.object.simple;
  var transName = "DeleteBaseMap_" + new Date().getTime();

  // Begin transaction
  self.crud.beginTransaction(transName,function(btErr)
  {
    if (btErr)
    {
      callback(btErr,null);
      return;
    }

    // Delete base map
    opt.transName = transName;

    wgBaseMap.super_.prototype.delete.call(self,opt,function(err,res)
    {
      if (err)
      {
        self.crud.rollbackTransaction(transName,function(rtErr){});
        callback(err,res);
        return;
      }

      // Delete i18n entry (only if simple is false or null)
      var i18nDelOpt = {
        sysuser_id: opt.sysuser_id,
        transName: transName,
        object: simple ? null : {label_key: res.result.label}
      };

      manageI18N(i18nDelOpt,"deleteWoId",function(i18nErr)
      {
        if (i18nErr)
        {
          self.crud.rollbackTransaction(transName,function(rtErr){});
          callback(i18nErr,null);
          return;
        }

        // Commit transaction
        self.crud.commitTransaction(transName,function(ctErr)
        {
          callback(ctErr,ctErr ? null : res);
        });
      });
    });
  });
}

/*
 * New method.
 */
wgBaseMap.prototype.getConfig = function(opt,callback)
{
  var aPerm = opt.object ? opt.object.permLayers : null;

  if (aPerm && aPerm.length)
  {
    /*
     * Get base map for given permission and without permission;
     * set query order by _position.
     */
    var aPar = [];
    var qVal = [];

    for (var i = 0;i < aPerm.length;i++)
    {
      aPar.push("$" + (i+1));
      qVal.push({value: aPerm[i]});
    }

    var qOpt = {
      queryName: "wgBaseMapConfig",
      fields: self.crudUtils.ALL_FIELDS,
      from: [{
        schema: self.schemaName,
        name: self.tableName,
        type:self.crudUtils.TABLE
      }],
      where: [
        {
          typeCond: self.crudUtils.SIMPLE_COND,
          leftSide: "permission",
          operator: self.crudUtils.IN,
          rightSide: aPar.join(),
          nextCond: self.crudUtils.OR
        },
        {
          typeCond: self.crudUtils.SIMPLE_COND,
          leftSide: "permission",
          operator: self.crudUtils.IS,
          rightSide: self.crudUtils.NULL
        }
      ],
      ordering: [{field:"_position", orderType:self.crudUtils.ASC}]
    };

    self.crud.select(qOpt,qVal,function(err,res)
    {
      callback(err,err ? null : res.result);
    });
  }
  else
  {
    // Add custom order to option
    if (!opt.object)
      opt.object = {};

    opt.object.ord = "_position|ASC";

    /* Load master */
    self.master(opt,function(err,res)
    {
      // Remove custom order
      delete opt.object.ord;

      callback(err,err ? null : res.result);
    });
  }
}

wgBaseMap.prototype.bulkUpdate = function(opt,callback)
{
  // NOTE: with this method cannot update i18n entry
  var transName = "BulkUpdateBaseMap_" + new Date().getTime();
  var aObject = [];

  for (var i = 0;i < opt.object.length;i++)
  {
    aObject.push({
      sysuser_id: opt.sysuser_id,
      transName: transName,
      object: opt.object[i],
      id: opt.object[i].id
    });

    delete opt.object[i].id;
  }

  // Begin transaction
  self.crud.beginTransaction(transName,function(btErr)
  {
    if (btErr)
    {
      callback(btErr,null);
      return;
    }

    // Update
    async.each(aObject,function(obj,cb)
    {
      wgBaseMap.super_.prototype.update.call(self,obj,function(err,res)
      {
        cb(err);
      });
    },
    function(err)
    {
      if (err)
      {
        self.crud.rollbackTransaction(transName,function(rtErr){});
        callback(err,null);
        return;
      }

      // Commit transaction
      self.crud.commitTransaction(transName,function(ctErr)
      {
        callback(ctErr,ctErr ? null : {result: {}});
      });
    });
  });
}

/*
 * Export.
 */
exports.wgBaseMap = wgBaseMap;

/*
 * Private function.
 */
function manageI18N(opt,method,callback)
{
  if (!opt.object)
  {
    callback(null);
    return;
  }

  // Get i18n entity
  var entity = self.entityHolder.getEntity("i18n");
  if (!entity)
  {
    callback({message:"Cannot retrieve i18n entity"});
    return;
  }

  // Exec
  entity[method](opt,function(err,res)
  {
    callback(err);
  });
}
