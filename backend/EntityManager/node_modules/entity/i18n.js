/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var entityTemplate = require("../../lib/entityTemplate").entityTemplate;
var async = require("async");
var util = require("util");

var self = {};

var i18n = function(schema)
{
  i18n.super_.call(this);

  this.moduleName = "Entity.i18n";
  this.entityName = "i18n";
  this.schemaName = schema;
  this.tableName  = "i18n_string";

  this.fieldTypeObj   = null;
  this.masterFieldObj = null;
  this.detailFieldObj = null;

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;

  this.retFieldObj = [{name: this.entityId}];
  this.hasLogicalDelete = false;
}

/*
 * Inheritance
 */
util.inherits(i18n,entityTemplate);

i18n.prototype.init = function(options)
{
  self = this;
  i18n.super_.prototype.init.call(self,options);
}

/*
 * Reimplemented method
 */
i18n.prototype.master = function(params,callback)
{
  var curLang = "it"; //Default language

  // Get language params
  if (params.object && params.object.lang)
    curLang = params.object.lang;

  /*
   * Read all i18n object in ascending depth order
   *
   * SELECT * FROM i18n ORDER BY id ASC, depth ASC
   *
   */
  var selectOpt = {
    queryName: "selectI18N",
    from: [{schema:self.schemaName,name:"i18n",type:self.crudUtils.TABLE}],
    fields: self.crudUtils.ALL_FIELDS,
    ordering: [
      {
        field: "id",
        orderType: self.crudUtils.ASC
      },{
        field: "depth",
        orderType: self.crudUtils.ASC
      }
    ]
  };

  // Exec query
  self.crud.select(selectOpt,[],function(err,resKey)
  {
    if (err)
    {
      callback(err,null);
    }
    else
    {
      // dictionary of i18n table
      var i18nKey = {};

      for (var idx=0; idx<resKey.result.length; idx++)
      {
        // temporary object to store i18n key-value pairs
        resKey.result[idx].string = {};

        i18nKey[resKey.result[idx].id] = resKey.result[idx];
      }

      /*
       * Retrieve all records from i18n_string:
       *
       * SELECT object_id, label_key, <lang> AS label_value
       * FROM i18n_string
       * ORDER BY object_id ASC
       */
      selectOpt = {
        queryName: "selectI18NString_" + curLang,
        fields: [
          {name:"object_id"},
          {name:"label_key"},
          {name:curLang, aliasF:"label_value"}
        ],
        from: [{
          schema: self.schemaName,
          type: self.crudUtils.TABLE,
          name: "i18n_string"
        }],
        ordering: [{
          field: "object_id",
          orderType: self.crudUtils.ASC
        }]
      };

      self.crud.select(selectOpt,[],function(errStr,resStr)
      {
        if (errStr)
        {
          self.log.error(self.moduleName+" - i18n_string error: "+errStr.message);
          callback(errStr,null);
        }
        else
        {
          var retObj = {};

          // associate every key-value pairs into the related object_id
          for (var idx=0; idx<resStr.result.length; idx++)
          {
            var obj = resStr.result[idx];

            i18nKey[obj.object_id].string[obj.label_key] = obj.label_value;
          }

          for (var key in i18nKey)
          {
            var item = i18nKey[key];

            /*
             * if item has a parent, we associate string object content to
             * parent string object, otherwise put string object int return
             * object
             */
            if (item.parent_id)
            {
              i18nKey[item.parent_id].string[item.object_key] = item.string;
            }
            else
              retObj[item.object_key] = item.string;
          }

          callback(null,retObj);
        }
      });
    }
  });
}

i18n.prototype.insert = function(opt,callback)
{
  var aLblKey = opt.object.label_key ? opt.object.label_key.split(".") : [];

  if (aLblKey.length < 2)
  {
    callback({message:"Null or malformed label_key"},null);
    return;
  }

  // Fix label key and get its parent key
  opt.object.label_key = aLblKey.pop();
  var parentKey = aLblKey.pop();

  // Get object_id for given label_key: insert entry if not found
  var funcOpt = {transName:opt.transName, objKey:parentKey};

  getOrInsertObjectId(funcOpt,function(oidErr,oidRes)
  {
    if (oidErr)
    {
      callback(oidErr,null);
      return;
    }

    // Insert
    opt.object.object_id = oidRes;

    i18n.super_.prototype.insert.call(self,opt,callback);
  });
}

/*
 * New method
 */
i18n.prototype.updateWoId = function(opt,callback)
{
  var aLblKey = opt.object.label_key ? opt.object.label_key.split(".") : [];

  if (aLblKey.length < 2)
  {
    callback({message:"Null or malformed label_key"},null);
    return;
  }

  // Get label key and get its parent key
  var labelKey = aLblKey.pop();
  var parentKey = aLblKey.pop();

  delete opt.object.label_key;

  // Get object_id for given label_key
  var funcOpt = {transName:opt.transName, objKey:parentKey};

  getObjectId(funcOpt,function(err,res)
  {
    if (err)
      callback(err,null);
    else if (!res)
      callback({message:"Unknow object key "+parentKey},null);
    else
    {
      /* Update */
      var aFld = [];
      var qVal = [];

      // Prepare fields and query value
      for (var key in opt.object)
      {
        aFld.push({name: key});
        qVal.push({value: opt.object[key]});
      }

      if (!aFld.length)
      {
        callback({message:"Nothig to update"},null);
        return;
      }

      qVal.push({value: res});
      qVal.push({value: labelKey});

      // Query options
      var qOpt = {
        queryName: "i18nUpdateWoId",
        transName: opt.transName,
        returning: [{name:"id"}],
        fields: aFld,
        table: {schema:self.schemaName, name:self.tableName},
        where: [
          {
            typeCond: self.crudUtils.SIMPLE_COND,
            leftSide: "object_id",
            operator: self.crudUtils.EQ,
            rightSide: "$" + (aFld.length+1),
            nextCond: self.crudUtils.AND
          },
          {
            typeCond: self.crudUtils.SIMPLE_COND,
            leftSide: "label_key",
            operator: self.crudUtils.EQ,
            rightSide: "$" + (aFld.length+2)
          }
        ]
      };

      self.crud.update(qOpt,qVal,callback);
    }
  });
}

i18n.prototype.upsertWoId = function(opt,callback)
{
  var labelKey = opt.object.label_key;

  self.updateWoId(opt,function(err,res)
  {
    if (err || (res.result && res.result.length))
    {
      callback(err,res);
      return;
    }

    // i18n_string.label_key NOT found => insert new record
    opt.object.label_key = labelKey;

    self.insert(opt,callback);
  });
}

i18n.prototype.deleteWoId = function(opt,callback)
{
  var aLblKey = opt.object.label_key ? opt.object.label_key.split(".") : [];

  if (aLblKey.length < 2)
  {
    callback({message:"Null or malformed label_key"},null);
    return;
  }

  // Get label key and get its parent key
  var labelKey = aLblKey.pop();
  var parentKey = aLblKey.pop();

  /*
   * DELETE FROM i18n_string WHERE label_key = $1 AND object_id =
   * (SELECT id FROM i18n WHERE object_key = $2) returning id
   */
  var qVal = [{value: labelKey},{value: parentKey}];
  var qOpt = {
    queryName: "i18nDeleteWoId",
    transName: opt.transName,
    returning: [{name: "id"}],
    table: {schema:self.schemaName, name: self.tableName},
    where: [
      {
        typeCond: self.crudUtils.SIMPLE_COND,
        leftSide: "label_key",
        operator: self.crudUtils.EQ,
        rightSide: "$1",
        nextCond: self.crudUtils.AND
      },
      {
        typeCond: self.crudUtils.SUBQUERY_COND,
        leftSide: "object_id",
        operator: self.crudUtils.EQ,
        rightSide: {
          fields: [{name: "id"}],
          from: [{
            schema: self.schemaName,
            type: self.crudUtils.TABLE,
            name: "i18n"
          }],
          where: [{
            typeCond: self.crudUtils.SIMPLE_COND,
            leftSide: "object_key",
            operator: self.crudUtils.EQ,
            rightSide: "$2"
          }]
        }
      }
    ]
  };

  self.crud.delete(qOpt,qVal,callback);
}

/*
 * Exports
 */
exports.i18n = i18n;

/*
 * Private utility function
 */
function selectStringToObject(obj,callback)
{
  var masterFieldI18NStringObj = [
    {name:"label_key"},
    {name:obj.lang, aliasF:"label_value"}
  ];

  var selectOpt = {
    queryName: "selectI18NString-"+obj.lang,
    fields: masterFieldI18NStringObj,
    from: [{
      schema: self.schemaName,
      type: self.crudUtils.TABLE,
      name: "i18n_string"
    }],
    where: [{
      typeCond: self.crudUtils.SIMPLE_COND,
      leftSide: "object_id",
      operator: self.crudUtils.EQ,
      rightSide: "$1"
    }]
  };

  var selectVal = [{value: obj.id}];

  // Exec query
  self.crud.select(selectOpt,selectVal,function(err,res)
  {
    if (res)
      obj.label = res.result;

    callback(err);
  });
}

/* Try to get id for given object_key in i18n table: insert if not found */
function getOrInsertObjectId(opt,callback)
{
  getObjectId(opt,function(err,res)
  {
    if (err || (!err && res))
    {
      callback(err,res);
      return;
    }

    // Exec insert
    var qOpt = {
      queryName: "i18nInsertObjectId",
      transName: opt.transName,
      fields: [{name:"object_key"},{name:"depth"}],
      table: {schema:self.schemaName,name:"i18n"},
      returning: [{name:"id"}]
    };
    var qVal = [{value:opt.objKey},{value:1}];

    self.crud.insert(qOpt,qVal,function(iErr,iRes)
    {
      if (iRes && iRes.result && iRes.result.id)
        callback(null,iRes.result.id);
      else
        callback(iErr,null);
    });
  });
}

/* Get id for given object_key in i18n table */
function getObjectId(opt,callback)
{
  var qOpt = {
    queryName: "i18nGetObjectId",
    transName: opt.transName,
    from: [{schema:self.schemaName,name:"i18n",type:self.crudUtils.TABLE}],
    fields: [{name: "id"}],
    where: [{
      typeCond: self.crudUtils.SIMPLE_COND,
      leftSide: "object_key",
      operator: self.crudUtils.EQ,
      rightSide: "$1"
    }]
  };
  var qVal = [{value: opt.objKey}];

  self.crud.select(qOpt,qVal,function(err,res)
  {
    if (err)
      callback(err,null);
    else
      callback(null,res.result.length ? res.result[0].id : null);
  });
}
