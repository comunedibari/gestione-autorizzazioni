/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var entityTemplate = require("../../lib/entityTemplate").entityTemplate;
var util = require("util");
var self = {};

var permission = function(schema)
{
  permission.super_.call(this);

  this.moduleName = "Entity permission";
  this.entityName = "permission";
  this.schemaName = schema;
  this.tableName  = "permission";

  this.fieldTypeObj = null;
  this.detailFieldObj = null;
  this.masterFieldObj = [
    {name:"id"},
    {name:"name"},
    {name:"description"},
    {name:"app_name"},
    {name:"app_desc"}];

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;
}

/*
 * Inheritance.
 */
util.inherits(permission,entityTemplate);

permission.prototype.init = function(options)
{
  self = this;
  permission.super_.prototype.init.call(self,options);
}

/*
 * New method.
 */
permission.prototype.updateByName = function(opt,callback)
{
  var name = opt.object.name;
  if (!name)
  {
    callback({message:"Null permission name"},null);
    return;
  }

  delete opt.object.name;

  // Get field and value
  var aFld = [];
  var aVal = [];

  for (var key in opt.object)
  {
    aFld.push({name: key});
    aVal.push({value: opt.object[key]});
  }

  if (!aFld.length)
  {
    self.log.info(self.moduleName+" - updateByName: nothing to update");
    callback(null,null);
    return;
  }

  // Update
  aVal.push({value: name});

  var qOpt = {
    transName: opt.transName,
    returning: [{name:"id"}],
    fields: aFld,
    table: {schema:self.schemaName, name:self.tableName},
    where: [{
      typeCond: self.crudUtils.SIMPLE_COND,
      leftSide: "name",
      operator: self.crudUtils.EQ,
      rightSide: "$" + aVal.length
    }]
  };

  self.crud.update(qOpt,aVal,callback);
}

permission.prototype.deleteByName = function(opt,callback)
{
  var name = opt.object.name;
  if (!name)
  {
    callback({message:"Null permission name"},null);
    return;
  }

  // Delete
  var qOpt = {
    transName: opt.transName,
    returning: [{name: "id"}],
    table: {schema:self.schemaName, name:self.tableName},
    where: [{
      typeCond: self.crudUtils.SIMPLE_COND,
      leftSide: "name",
      operator: self.crudUtils.EQ,
      rightSide: "$1"
    }]
  };

  self.crud.delete(qOpt,[{value:name}],callback);
}

/*
 * Exports
 */
exports.permission = permission;
