/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var entTemp = require("../../lib/entityTemplate").entityTemplate;
var util = require("util");
var self = {};

var wgMapTools = function(schema)
{
  wgMapTools.super_.call(this);

  this.moduleName = "Entity wgMapTools";
  this.entityName = "wgMapTools";
  this.schemaName = schema;
  this.tableName = "wg_map_tools";

  this.entityId = "id";
  this.entityIdType = this.crudUtils.STRING;
}

/*
 * Inheritance.
 */
util.inherits(wgMapTools,entTemp);

wgMapTools.prototype.init = function(opt)
{
  self = this;
  wgMapTools.super_.prototype.init.call(self,opt);
}

/*
 * New method.
 */
wgMapTools.prototype.getConfig = function(opt,callback)
{
  var aPerm = opt.object ? opt.object.permTools : null;

  if (aPerm && aPerm.length)
  {
    /*
     * Get tools for given permission and without permission;
     * set query order by _position.
     */
    var aPar = [];
    var qVal = [];

    for (var i = 0;i < aPerm.length;i++)
    {
      aPar.push("$" + (i+1));
      qVal.push({value: aPerm[i]});
    }

    var qOpt = {
      queryName: "wgMapToolsConfig",
      fields: self.crudUtils.ALL_FIELDS,
      from: [{
        schema: self.schemaName,
        name: self.tableName,
        type: self.crudUtils.TABLE
      }],
      where: [
        {
          typeCond: self.crudUtils.SIMPLE_COND,
          leftSide: "permission",
          operator: self.crudUtils.IN,
          rightSide: aPar.join(),
          nextCond: self.crudUtils.OR
        },
        {
          typeCond: self.crudUtils.SIMPLE_COND,
          leftSide: "permission",
          operator: self.crudUtils.IS,
          rightSide: self.crudUtils.NULL
        }
      ],
      ordering: [{field:"_position", orderType:self.crudUtils.ASC}]
    };

    self.crud.select(qOpt,qVal,function(err,res)
    {
      callback(err,err ? null : res.result);
    });
  }
  else
  {
    /*
     * Get tools without permission, order by _position.
     */
    var qOpt = {
      queryName: "wgMapToolsConfigWoPerm",
      fields: self.crudUtils.ALL_FIELDS,
      from: [{
        schema: self.schemaName,
        name: self.tableName,
        type: self.crudUtils.TABLE
      }],
      where: [{
        typeCond: self.crudUtils.SIMPLE_COND,
        leftSide: "permission",
        operator: self.crudUtils.IS,
        rightSide: self.crudUtils.NULL
      }],
      ordering: [{field:"_position", orderType:self.crudUtils.ASC}]
    };

    self.crud.select(qOpt,[],function(err,res)
    {
      callback(err,err ? null : res.result);
    });
  }
}

/*
 * Export.
 */
exports.wgMapTools = wgMapTools;
