/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var url        = require("url");

/*
 * utility class
 */
var utility = function()
{
  this.modName = "Entity utility";
}

utility.prototype.init = function(opt)
{
  this.log        = opt.log;
  this.httpClient = opt.httpClient
}

/*
 * Method to proxy to a given url (encoded)
 */
utility.prototype.proxy = function(opt, callback)
{
  var self = this;

  if (!opt.object.url)
  {
    var msg = "missing URL to proxy!"
    this.log.error(this.modName + ": " + msg);
    return callback({message:msg}, null);
  }

  // decode received url
  var decodedUrl = decodeURIComponent(opt.object.url);

  var urlObj = url.parse(decodedUrl);

  // build object to pass to get method
  var getOpt = {
    host: urlObj.hostname,
    port: urlObj.port || 80,
    path: urlObj.path
  };

  // discriminate between http and https protocols
  if (urlObj.protocol.toLowerCase() == 'https:')
  {
    getOpt.method = 'GET';
    getOpt.port = urlObj.port || 443;

    // https GET
    this.httpClient.req(getOpt, null, function(res)
    {
      if (!res)
      {
        var msg = "Error on get URL " + decodedUrl;
        self.log.error(this.modName + ": " + msg);
        return callback({message:msg}, null);
      }

      callback(null, res);
    });
  }
  else
  {
    // http GET
    this.httpClient.get(getOpt, function(res)
    {
      if (!res)
      {
        var msg = "Error on get URL " + decodedUrl;
        self.log.error(this.modName + ": " + msg);
        return callback({message:msg}, null);
      }

      callback(null, res);
    });
  }

}

exports.utility = utility;

/*
 * Private functions
 */
