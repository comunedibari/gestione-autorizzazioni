/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var entityTemplate = require("../../lib/entityTemplate").entityTemplate;
var util = require("util");

var self = {};

var wgEdit = function(schema)
{
  wgEdit.super_.call(this);

  this.moduleName = "Entity wgEditing";
  this.entityName = "wgEditing";
}

/*
 * Inheritance
 */
util.inherits(wgEdit, entityTemplate);

wgEdit.prototype.init = function(opt)
{
  // Store this object
  self = this;

  // Init parent
  wgEdit.super_.prototype.init.call(self, opt);
}

wgEdit.prototype.insert = function(opt,callback)
{
  var layerName = null;

  // get layer name
  if (opt.query && opt.query.layer)
    layerName = opt.query.layer;

  if (!layerName)
  {
    self.log.error(self.moduleName + " - no layer name specified!");
    return callback({message:""}, null);
  }

  if (self.funcUtils.isEmptyObject(opt.object))
  {
    self.log.error(self.moduleName + " - no body received!");
    return callback({message:""}, null);
  }

  /*
   * retrieve table srid
   */
  var tableSRID = null;
  var tableGEOM = null;

  // get table schema
  self.crud.getSchema(opt, layerName, function(errGS, resGS)
  {
    if (errGS)
    {
      self.log.error(self.moduleName + " - Error on get table schema: " + errGS.message);
      callback({message:""}, null);
    }
    else
    {
      var tableSchema = resGS.result;

      // get table SRID
      var querySrid = "SELECT Find_SRID('"+tableSchema+"', '"+layerName+"', 'geom') AS srid";

      self.crud.select({queryString:querySrid}, [], function(errS,resS)
      {
        if (errS)
        {
          self.log.error(self.moduleName + " - Error on get table srid: " + errS.message);
          callback({message:""}, null);
        }
        else
        {
          tableSRID = resS.result[0].srid;

          // get table geometry type
          var queryGeom = "SELECT type " +
            "FROM geometry_columns " +
            "WHERE f_table_schema = '" + tableSchema + "'" +
            "AND f_table_name = '" + layerName + "'" +
            "and f_geometry_column = 'geom'";

          self.crud.select({queryString:queryGeom}, [], function(errG,resG)
          {
            if (errG)
            {
              self.log.error(self.moduleName + " - Error on get table geometry type: " + errG.message);
              callback({message:""}, null);
            }
            else
            {
              tableGEOM = resG.result[0].type;

              // check type of received geometry
              if (checkGeom(opt.object, tableGEOM))
              {
                /*
                 * build and execute insert query
                 */
                var queryString = buildInsert(tableSchema, layerName, tableSRID, tableGEOM, opt);

                self.crud.insert({queryString:queryString},[], function(err,res)
                {
                  if (err)
                  {
                    self.log.error(self.moduleName + " - Error on insert: " + err.message);
                    callback({message:""}, null);
                  }
                  else
                  {
                    // emit event to refresh layer
                    self.eventSender.postEvent({
                      message: "Event to refresh web map",
                      source: "EntityManager",
                      type: "refreshMap",
                      detail: {
                        sio_id: opt.sio_id,
                        layerName : [layerName]
                      }
                    });

                    callback(err, res);
                  }
                });
              }
            }
          });
        }
      });
    }
  });
}


/*
 * New methods
 */

wgEdit.prototype.updateFeatures = function(opt,callback)
{
  var layerName = null;

  if (self.funcUtils.isEmptyObject(opt.object))
  {
    self.log.error(self.moduleName + " - no body received!");
    return callback({message:""}, null);
  }

  // get layer name
  if (!opt.object.layerName)
  {
    self.log.error(self.moduleName + " - no layer name specified!");
    return callback({message:""}, null);
  }
  else
    layerName = opt.object.layerName;

  /*
   * retrieve table srid
   */
  var tableSRID = null;
  var tableGEOM = null;

  // get table schema
  self.crud.getSchema(opt, layerName, function(errGS, resGS)
  {
    if (errGS)
    {
      self.log.error(self.moduleName + " - Error on get table schema: " + errGS.message);
      callback({message:""}, null);
    }
    else
    {
      var tableSchema = resGS.result;

      // get table SRID
      var querySrid = "SELECT Find_SRID('"+tableSchema+"', '"+layerName+"', 'geom') AS srid";

      self.crud.select({queryString:querySrid}, [], function(errS,resS)
      {
        if (errS)
        {
          self.log.error(self.moduleName + " - Error on get table srid: " + errS.message);
          callback({message:""}, null);
        }
        else
        {
          tableSRID = resS.result[0].srid;

          // get table geometry type
          var queryGeom = "SELECT type " +
            "FROM geometry_columns " +
            "WHERE f_table_schema = '" + tableSchema + "'" +
            "AND f_table_name = '" + layerName + "'" +
            "and f_geometry_column = 'geom'";

          self.crud.select({queryString:queryGeom}, [], function(errG,resG)
          {
            if (errG)
            {
              self.log.error(self.moduleName + " - Error on get table geometry type: " + errG.message);
              callback({message:""}, null);
            }
            else
            {
              tableGEOM = resG.result[0].type;

              // check type of received geometry
              if (checkGeom(opt.object, tableGEOM))
              {
                /*
                 * build and execute update query
                 */
                var queryString = buildUpdate(tableSchema, layerName, tableSRID, tableGEOM, opt);

                self.crud.update({queryString:queryString},[], function(err,res)
                {
                  if (err)
                  {
                    self.log.error(self.moduleName + " - Error on update: " + err.message);
                    callback({message:""}, null);
                  }
                  else
                  {
                    // emit event to refresh layer
                    self.eventSender.postEvent({
                      message: "Event to refresh web map",
                      source: "EntityManager",
                      type: "refreshMap",
                      detail: {
                        sio_id: opt.sio_id,
                        layerName : [layerName]
                      }
                    });

                    callback(err, res);
                  }
                });
              }
            }
          });
        }
      });
    }
  });
}

wgEdit.prototype.deleteFeatures = function(opt,callback)
{
  var layerName = null;

  // get layer name
  if (opt.object.layerName)
    layerName = opt.object.layerName;

  if (!layerName)
  {
    self.log.error(self.moduleName + " - no layer name specified!");
    return callback({message:""}, null);
  }

  if (!opt.object.ftId || opt.object.ftId.length == 0)
  {
    self.log.error(self.moduleName + " - no feature id to delete received!");
    return callback({message:""}, null);
  }

  // get table schema
  self.crud.getSchema(opt, layerName, function(errGS, resGS)
  {
    if (errGS)
    {
      self.log.error(self.moduleName + " - Error on get table schema: " + errGS.message);
      callback({message:""}, null);
    }
    else
    {
      var tableSchema = resGS.result;

      var params   = [];
      var queryVal = [];

      for (var idx=0; idx<opt.object.ftId.length; idx++)
      {
        params.push('$'+(idx+1));
        queryVal.push({value:opt.object.ftId[idx]});
      }

      var queryOpt = {
        queryName: "deleteFt",
        table: {schema:tableSchema, name:layerName},
        where:
        [{
          typeCond: self.crudUtils.SIMPLE_COND,
          leftSide: "gid",
          operator: self.crudUtils.IN,
          rightSide: params.join(",")
        }]
      };

      self.crud.delete(queryOpt, queryVal, function(err, res)
      {
        if (err)
        {
          self.log.error(self.moduleName + " - Error on delete features: " + err.message);
          callback(err, null);
        }
        else
        {
          // emit event to refresh layer
          self.eventSender.postEvent({
            message: "Event to refresh web map",
            source: "EntityManager",
            type: "refreshMap",
            detail: {
              sio_id: opt.sio_id,
              layerName : [layerName]
            }
          });

          callback(null, res);
        }
      });
    }
  });
}

/*
 * Exports
 */
exports.wgEdit = wgEdit;

/*
 * Private utility functions
 */

// build insert query
function buildInsert(tableSchema, layerName, tableSRID, tableGEOM, opt)
{
  var queryString = "INSERT INTO " + tableSchema + "." + layerName + "(";
  var queryStringValues = " VALUES(";

  var firstVal = true;
  var geomSRID = null;
  var geom     = null;

  // check for presence of geometry fields (geom and srid)
  if (opt.object.srid)
  {
    geomSRID = opt.object.srid;
    geom     = JSON.stringify(opt.object.geom);

    // remove srid and geom keys
    delete opt.object.srid;
    delete opt.object.geom;
  }

  // cycle on fields to insert
  for (var key in opt.object)
  {
    if (!firstVal)
    {
      queryString += ", ";
      queryStringValues += ", ";

      firstVal = false;
    }

    queryString += key;
    queryStringValues += opt.object[key];
  }

  if (geom)
  {
    if (!firstVal)
    {
      queryString += ", ";
      queryStringValues += ", ";
    }

    queryString += "geom) ";
    queryStringValues +=  geomSRID != tableSRID ?
      "ST_Transform(ST_SetSRID(ST_GeomFromGeoJSON('"+geom+"'),"+geomSRID+"),"+tableSRID+"))" :
      "ST_SetSRID(ST_GeomFromGeoJSON('"+geom+"'),"+geomSRID+"))";
  }
  else
  {
    queryString += ") ";
    queryStringValues += ") ";
  }

  return queryString + queryStringValues;
}

// build update query
function buildUpdate(tableSchema, layerName, tableSRID, tableGEOM, opt)
{
  var queryString = "UPDATE " + tableSchema + "." + layerName + " SET ";
  var queryStringValues = " VALUES(";

  var firstVal = true;
  var geomSRID = null;
  var geom     = null;
  var gid      = null;

  // check for presence of geometry fields (geom and srid)
  if (opt.object.srid)
  {
    geomSRID = opt.object.srid;
    geom     = JSON.stringify(opt.object.geom);
    gid      = opt.object.gid;

    // remove gid, srid, geom and layerName keys
    delete opt.object.gid;
    delete opt.object.srid;
    delete opt.object.geom;
    delete opt.object.layerName;
  }

  // cycle on fields to update
  for (var key in opt.object)
  {
    if (!firstVal)
    {
      queryString += ", ";

      firstVal = false;
    }

    queryString += (key + "=" + opt.object[key]);
  }

  // add geom to update
  if (geom)
  {
    if (!firstVal)
    {
      queryString += ", ";
    }

    queryString +=  geomSRID != tableSRID ?
      "geom = ST_Transform(ST_SetSRID(ST_GeomFromGeoJSON('"+geom+"'),"+geomSRID+"),"+tableSRID+") " :
      "geom = ST_SetSRID(ST_GeomFromGeoJSON('"+geom+"'),"+geomSRID+") ";
  }

  // add WHERE condition
  queryString += "WHERE gid=" + gid;

  return queryString;
}

// check if geometry received is compatible with table geometry
function checkGeom(object, tableGEOM)
{
  var isValid = false;

  // check presence of geom attribute
  if (object.geom)
  {
    // check if geom type and table geom type are different
    if (object.geom.type.toUpperCase() != tableGEOM.toUpperCase())
    {
      // check if geom type is a 'simple' version of geometry type
      if ("MULTI"+object.geom.type.toUpperCase() == tableGEOM.toUpperCase())
      {
        // in this case we transform 'simple' geometry into corresponding 'multi'
        object.geom = {
          type: tableGEOM,
          coordinates: [object.geom.coordinates]
        };

        isValid = true;
      }
    }

    isValid = true;

  }

  if (!isValid)
    self.log.error(self.moduleName + " - Geometry type mismatch!");

  return isValid;
}
