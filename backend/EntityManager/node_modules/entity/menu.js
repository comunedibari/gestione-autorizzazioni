/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var entityTemplate = require("../../lib/entityTemplate").entityTemplate;
var async = require("async");
var util = require("util");
var self = {};

var menu = function(schema)
{
  menu.super_.call(this);

  this.moduleName = "Entity.menu";
  this.entityName = "menu";
  this.schemaName = schema;
  this.tableName  = "menu";

  this.fieldTypeObj = null;
  this.masterFieldObj = null;
  this.detailFieldObj = null;

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;
}

/*
 * Inheritance
 */
util.inherits(menu,entityTemplate);

menu.prototype.init = function(options)
{
  self = this;
  menu.super_.prototype.init.call(self,options);
}

/*
 * Reimplemented functions
 */
menu.prototype.master = function(params,callback)
{
  if (params.object.permId)
  {
    var permIdArr = params.object.permId.split(",");

    // get menu_item associated with these permissions
    selectMenuItemByPermissions(permIdArr, function(errMenuIt, resMenuIt)
    {
      if (errMenuIt || !resMenuIt.result)
        return callback(errMenuIt, null);

      var menuIdArr = [];
      for (var idx=0; idx<resMenuIt.result.length; idx++)
        menuIdArr.push(resMenuIt.result[idx].id_group);

      // get first level menu only if there are menu item
      if (menuIdArr.length)
      {
        // get first level menu
        selectMenuByMenuItem(menuIdArr, function(errMenu, resMenu)
        {
          if (errMenu || ! resMenu.result)
            return callback(errMenu, null);

          var retMenu = {result:organizeMenu(resMenu.result, resMenuIt.result)};
          return callback(null, retMenu);
        });
      }
      else
        return callback(null, {result:[]});
    });
  }
  else
  {
    var strErr = " No permId provided!!";

    self.log.error(self.moduleName + strErr);

    return callback({message:strErr}, null);
  }
}

/*
 * Exports
 */
exports.menu = menu;

/*
 * Private utility functions
 */

// get menu_item associated with these permissions
function selectMenuItemByPermissions(permIdArr, callback)
{
  /*
   * Query example
   *
   * SELECT DISITNCT mi.* FROM menu_item mi
   * LEFT JOIN permission p ON mi.id = p.menu_item_id
   * WHERE p.id IN (1,2, 3,....)
  */

  var crudUtil = self.crudUtils;

  var params   = [];
  var queryVal = [];

  for(var i = 0; i < permIdArr.length; i++)
  {
    params.push('$'+(i+1));
    queryVal.push({value:permIdArr[i]});
  }

  // NOTE: prefix menu_item is sometime used for ambiguos fields
  var queryOpt =
  {
    queryName: "MenuItemByPermissions",
    fields: [
      {name:"menu_item.id", operator:crudUtil.DISTINCT},
      {name:"id_group"},
      {name:"label"},
      {name:"tooltip"},
      {name:"image"},
      {name:"menu_item.app_name"},
      {name:"action"},
      {name:"params"},
      {name:"shortcut"},
      {name:"position"}
    ],
    from: [{schema:self.schemaName,name:"menu_item",type:crudUtil.TABLE}],
    join:[
      {
        type: crudUtil.TABLE,
        join: crudUtil.LEFT,
        schema: self.schemaName,
        tableName: "permission",
        cond:
        [{
          typeCond: crudUtil.SIMPLE_COND,
          leftSide: self.schemaName + ".menu_item.id",
          operator: crudUtil.EQ,
          rightSide: "menu_item_id"
        }]
      }
    ],
    where:[
      {
        typeCond: crudUtil.SIMPLE_COND,
        leftSide: "permission.id",
        operator: crudUtil.IN,
        rightSide: params.join(",")
      }
    ],
    ordering:[{field:"position", orderType:crudUtil.ASC}]
  };

  // Exec query
  self.crud.select(queryOpt, queryVal, function(err,res)
  {
    if (err)
      return callback(err, null);

    callback(null, res);
  });
}

// get first level menu related given menuItem
function selectMenuByMenuItem(menuIdArr, callback)
{
  /*
   * Query example
   *
   * SELECT * FROM menu
   * WHERE id IN (1,2, 3,....)
   * ORDER BY position ASC
   */

  var crudUtil = self.crudUtils;

  var params   = [];
  var queryVal = [];

  for(var i = 0; i < menuIdArr.length; i++)
  {
    params.push('$'+(i+1));
    queryVal.push({value:menuIdArr[i]});
  }

  var queryOpt =
  {
    queryName: "MenuByMenuItems",
    fields: crudUtil.ALL_FIELDS,
    from: [{schema:self.schemaName,name:"menu",type:crudUtil.TABLE}],
    where:[
      {
        typeCond: crudUtil.SIMPLE_COND,
        leftSide: "id",
        operator: crudUtil.IN,
        rightSide: params.join(",")
      }
    ],
    ordering:[{field:"position", orderType:crudUtil.ASC}]
  };

  // Exec query
  self.crud.select(queryOpt, queryVal, function(err,res)
  {
    if (err)
      return callback(err, null);

    callback(null, res);
  });
}

// build the menu object to return to client
function organizeMenu(menuArr, menuItArr)
{
  for (var idx=0; idx<menuItArr.length; idx++)
  {
    var menuItem = menuItArr[idx];

    for (var jdx=0; jdx<menuArr.length; jdx++)
    {
      if (menuArr[jdx].id == menuItem.id_group)
      {
        if (!menuArr[jdx].hasOwnProperty("items"))
          menuArr[jdx].items = [];

        menuArr[jdx].items.push(menuItem);
      }
    }
  }

  return menuArr;
}
