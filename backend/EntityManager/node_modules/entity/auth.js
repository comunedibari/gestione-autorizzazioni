/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var util = require("util");
var crypto = require("crypto");
var entityTemplate = require("../../lib/entityTemplate").entityTemplate;

var self = {};

var auth = function(schema)
{
  auth.super_.call(this);

  this.moduleName = "Entity.auth";
  this.entityName = "auth";
  this.schemaName = schema;

  this.fieldTypeObj = null;
  this.masterFieldObj = null;
  this.detailFieldObj = null;

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;

  this.retFieldObj = null;

  this.hasLogicalDelete = false;
}

/*
 * Inheritance
 */
util.inherits(auth,entityTemplate);

auth.prototype.init = function(options)
{
  // Store this object
  self = this;

  // Init parent
  auth.super_.prototype.init.call(self,options);
}

/*
 * Response to GET /auth/userPermission
 * The following steps are performed:
 * 1. verifies that there is a user (identified by sysuser_id)
 * 2. if yes, return user associated permissions
 * 3. if no, return all permissions
 */
auth.prototype.userPermission = function(params, callback)
{
  if (params.sysuser_id)
  {
    // get user roles
    selectRoleToUser(params.sysuser_id, function(roleErr, roleRes)
    {
      if (roleErr)
        return callback(roleErr, null);

      var roleIdArr = [];
      for (var index=0; index<roleRes.length; index++)
        roleIdArr.push(roleRes[index].role_id);

      // get permissions
      selectPermissionsToRoles(roleIdArr, function(permRoleErr, permRoleRes)
      {
        if (permRoleErr)
          return callback(permRoleErr, null);

        var permIdArr = [];
        for (var index=0; index<permRoleRes.length; index++)
          permIdArr.push(permRoleRes[index].permission_id);

        selectPermissions(permIdArr, function(permErr, permRes)
        {
          if (permErr)
            return callback(permErr, null);

          return callback(null, organizePermByApp(permRes));
        });
      });
    });

  }
  else
  {
    //TODO
    self.log.info(self.moduleName + " - no sysuser_id provided -> return all permissions");

    // get all permissions
    selectPermissions(null, function(permErr, permRes)
    {
      if (permErr)
        return callback(permErr, null);

      return callback(null, organizePermByApp(permRes));
    });
  }
}

/*
 * Response to GET /auth/rolePermission.
 * A role csv string, with roles name, is required (role1,role2,...).
 */
auth.prototype.rolePermission = function(params,callback)
{
  var strRole = params.object ? params.object.role : null;

  if (!strRole)
    return callback({message: "Missing role string"},null);

  // Get permissions id
  selectPermissionsToRoleNames(strRole.split(","),function(idErr,idRes)
  {
    if (idErr)
      return callback(idErr,null);

    var aPermId = [];

    for (var i = 0;i < idRes.length;i++)
      aPermId.push(idRes[i].permission_id);

    // Get permissions detail
    if (!aPermId.length)
     return callback(null,{});

    selectPermissions(aPermId,function(permErr,permRes)
    {
      if (permErr)
        return callback(permErr,null);

      return callback(null,organizePermByApp(permRes));
    });
  });
}

/*
 * Response to PUT /auth/newPassword
 * The following steps are performed:
 * 1. verifies that received data are corrected
 * 2. if yes, generate new password and send user email
 * 3. if no, return message error
 */
auth.prototype.newPassword = function(params, callback)
{
  // convert username to lowercase before to process
  params.object.username = params.object.username.toLowerCase();

  // verify correct data
  verifyUserData(params.object.username,params.object.email,function(userErr,userRes)
  {
    var retErr = {};

    if (self.funcUtils.isEmptyObject(userRes))
      retErr.message = 1; //"I dati inseriti non sono corretti.";
    else if (userErr)
    {
      self.log.error(self.moduleName + " - verify user data error: "+userErr.message);
      retErr.message = 2;
    }

    // if wrong data, exit returning msg error
    if (!self.funcUtils.isEmptyObject(retErr))
      return callback(retErr, null);

    var transName = "NewPassword_" + new Date().getTime();

    // generate new user password
    userRes.newPwd    = generateUserPwd();
    userRes.username  = params.object.username;
    userRes.email     = params.object.email;
    userRes.transName = transName;

    // begin transaction
    self.crud.beginTransaction(transName,function(bgErr)
    {
      if (bgErr)
      {
        callback(bgErr,null);
        return;
      }

      // save new user password
      saveNewPassword(userRes, function(pwdErr, pwdRes)
      {
        // if there is an error, return msg error
        if (pwdErr)
        {
          self.log.error(self.moduleName + " - save new user password error: " +
            pwdErr.message);

          self.crud.rollbackTransaction(transName,function(rollErr)
          {
            return callback({message:3},null);
          });
        }

        // send user email with new password
        sendUserPwdMail(userRes, function(errMail)
        {
          if (errMail)
          {
            self.log.error(self.moduleName + " - send credentials email error: " +
              errMail.message);

            self.crud.rollbackTransaction(transName,function(rollErr)
            {
              return callback({message:4},null);
            });
          }

          self.crud.commitTransaction(transName,function(comErr)
          {
            if (comErr)
            {
              callback(comErr,null);
            }
            else
            {
              return callback(null, pwdRes);
            }
          });
        });
      });

    });

  });
}

/*
 * Exports
 */
exports.auth = auth;

/*
 * Private utility functions
 */

// select the roles associated to a given user (identified by sysuser_id)
function selectRoleToUser(sysuser_id, callback)
{
  var crudUtil = self.crudUtils;
  var queryVal = [{value: sysuser_id}];
  var queryOpt =
  {
    queryName: "Auth_RoleForUser",
    fields: [{name:"role_id"}],
    from: [{schema:self.schemaName, name:"role_sysuser", type:crudUtil.TABLE}],
    where:
    [{
      typeCond: crudUtil.SIMPLE_COND,
      leftSide: "sysuser_id",
      operator: crudUtil.EQ,
      rightSide: "$1"
    }]
  };

  // Exec query
  self.crud.select(queryOpt, queryVal, function(err,res)
  {
    if (err)
      return callback(err, null);

    callback(null, res.result);
  });
}

// select the permissions associated to a roles array (user roles)
function selectPermissionsToRoles(roles, callback)
{
  var crudUtil = self.crudUtils;

  var params   = [];
  var queryVal = [];

  for(var i = 0; i < roles.length; i++)
  {
    params.push('$'+(i+1));
    queryVal.push({value:roles[i]});
  }

  var queryOpt =
  {
    queryName: "Auth_PermForUser",
    fields: [{name:"permission_id"}],
    from: [{schema:self.schemaName,name:"permission_role",type:crudUtil.TABLE}],
    where:
    [{
      typeCond: crudUtil.SIMPLE_COND,
      leftSide: "role_id",
      operator: crudUtil.IN,
      rightSide: params.join(",")
    }]
  };

  // Exec query
  self.crud.select(queryOpt, queryVal, function(err,res)
  {
    if (err)
      return callback(err, null);

    callback(null, res.result);
  });
}

// select the permissions associated to a roles name array
function selectPermissionsToRoleNames(roles,callback)
{
  var params   = [];
  var queryVal = [];
  var crudUtil = self.crudUtils;

  for(var i = 0; i < roles.length; i++)
  {
    params.push('$'+(i+1));
    queryVal.push({value:roles[i]});
  }

  var queryOpt =
  {
    queryName: "PermForRoleName",
    fields: [{name:"permission_id",operator:crudUtil.DISTINCT}],
    from: [{schema:self.schemaName,name:"permission_role",type:crudUtil.TABLE}],
    join: [{
      type: self.crudUtils.TABLE,
      join: self.crudUtils.LEFT,
      schema: self.schemaName,
      tableName: "role",
      alias: "rs",
      cond: [{
          typeCond: self.crudUtils.SIMPLE_COND,
          leftSide: self.schemaName + ".permission_role.role_id",
          operator: self.crudUtils.EQ,
          rightSide: "rs.id"
        }]
    }],
    where:
    [{
      typeCond: crudUtil.SIMPLE_COND,
      leftSide: "rs.name",
      operator: crudUtil.IN,
      rightSide: params.join(",")
    }]
  };

  // Exec query
  self.crud.select(queryOpt,queryVal,function(err,res)
  {
    if (err)
      return callback(err,null);

    callback(null,res.result);
  });
}

// select the permissions detail associated to a user
// if permissions is null, all permissions in the table are returned
function selectPermissions(permissions, callback)
{
  var crudUtil = self.crudUtils;

  var params   = [];
  var queryVal = [];

  var queryOpt =
  {
    queryName: "PermissionsDet",
    fields: [
      {name:"id"},
      {name:"name"},
      {name:"app_name"}
    ],
    from: [{schema:self.schemaName,name:"permission",type:crudUtil.TABLE}],
    ordering:[{field:"app_name", orderType:crudUtil.ASC}]
  };

  // if permissions is not null build the select where condition
  if (permissions)
  {
    for(var i = 0; i < permissions.length; i++)
    {
      params.push('$'+(i+1));
      queryVal.push({value:permissions[i]});
    }

    // adding where condition in the select query
    queryOpt.where =
    [{
      typeCond: crudUtil.SIMPLE_COND,
      leftSide: "id",
      operator: crudUtil.IN,
      rightSide: params.join(",")
    }]
  }

  // Exec query
  self.crud.select(queryOpt, queryVal, function(err,res)
  {
    if (err)
      return callback(err, null);

    return callback(null, res.result);
  });
}


// organize permissions grouping them by app
function organizePermByApp(permObj)
{
  var perm = {};

  for (var idx=0; idx<permObj.length; idx++)
  {
    var permItem = permObj[idx];

    if (!perm.hasOwnProperty(permItem.app_name))
      perm[permItem.app_name] = {id:[], name:[]};

    perm[permItem.app_name].id.push(permItem.id);
    perm[permItem.app_name].name.push(permItem.name);
  }

  return perm;
}


// verify if username and email are correct (relative to same user)
function verifyUserData(username, email, callback)
{
  var crudUtil = self.crudUtils;
  var verifyUserQueryOpt = {};
  var queryVal = [];

  queryVal.push({value:username});
  queryVal.push({value:email});

  verifyUserQueryOpt =
  {
    queryName: "verifyUser",
    fields: [{name:"id"},{name:"name"},{name:"surname"}],
    from: [{schema:self.schemaName,name:"view_sysuser",type:crudUtil.TABLE}],
    where:[
      {
        typeCond: crudUtil.SIMPLE_COND,
        leftSide: "LOWER(username)",
        operator: crudUtil.EQ,
        rightSide: "$1",
        nextCond: crudUtil.AND
      },
      {
        typeCond: crudUtil.SIMPLE_COND,
        leftSide: "email",
        operator: crudUtil.EQ,
        rightSide: "$2"
      }
    ],
    returning:[{name:"id"}]
  };

  // Exec query
  self.crud.select(verifyUserQueryOpt, queryVal, function(err,res)
  {
    if (err)
      return callback(err, null);

    callback(null, res.result[0]);
  });
}


// generate random user password
function generateUserPwd()
{
  var chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghijklmnopqrstuvwxyz";
  var string_length = 8;
  var randomstring = '';

  for (var i=0; i<string_length; i++)
  {
      var rnum = Math.floor(Math.random() * chars.length);
      randomstring += chars.substring(rnum,rnum+1);
  }

  return randomstring;
}


// update user data with new password
function saveNewPassword(userObj, callback)
{
  var crudUtil = self.crudUtils;
  var saveNewPwdQueryOpt = {};
  var queryVal = [];

  var signature =
    crypto.createHash("md5").update(userObj.username+userObj.newPwd).digest("hex");

  queryVal.push({value:signature});
  queryVal.push({value:userObj.username});

  saveNewPwdQueryOpt =
  {
    queryName: "saveNewPwd",
    table: {schema:self.schemaName, name:"sysuser"},
    fields:[
      {name:"signature"}
    ],
    where:[
      {
        typeCond: crudUtil.SIMPLE_COND,
        leftSide: "username",
        operator: crudUtil.EQ,
        rightSide: "$2",
        nextCond: crudUtil.AND
      },
      {
        typeCond: crudUtil.SIMPLE_COND,
        leftSide: "deleted",
        operator: crudUtil.EQ,
        rightSide: false
      }
    ],
    returning:[{name:"id"}]
  };

  if (userObj.transName)
    saveNewPwdQueryOpt.transName = userObj.transName;

  // Exec query
  self.crud.update(saveNewPwdQueryOpt, queryVal, function(err,res)
  {
    if (err)
      return callback(err, null);

    callback(null, {result:res.result[0]});
  });
}


// send email to user with new system credentials
function sendUserPwdMail(userObj, callback)
{
  var jsonMailCfg =
  {
    to: userObj.email,
    subject: self.env.appName + " - Notifica nuove credenziali di accesso al sistema",
    text: "Buongiorno "+userObj.name+" "+userObj.surname+",\n\n"+
          "di seguito le Sue nuove credenziali per accedere al sistema:\n\n"+
          "username: "+userObj.username+"\n"+
          "password: "+userObj.newPwd+"\n\n"+
          "web address: "+self.env.url+"\n\n\n"+
          "Saluti,\n\n\n"+
          "L'amministratore del sistema"
  }

  self.mailer.sendMail(jsonMailCfg, function(err){
    return callback(err);
  });
}
