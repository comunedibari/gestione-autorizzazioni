/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var entTemp = require("../../lib/entityTemplate").entityTemplate;
var util = require("util");
var self = {};

var wgLegendClass = function(schema)
{
  wgLegendClass.super_.call(this);

  this.moduleName = "Entity wgLegendClass";
  this.entityName = "wgLegendClass";
  this.schemaName = schema;
  this.tableName = "wg_legend_class";

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;

  this.retFieldObj = [{name:"id"},{name:"name"}];
}

/*
 * Inheritance.
 */
util.inherits(wgLegendClass,entTemp);

wgLegendClass.prototype.init = function(opt)
{
  self = this;
  wgLegendClass.super_.prototype.init.call(self,opt);
}

wgLegendClass.prototype.insert = function(opt,callback)
{
  var i18nInsOpt = {
    sysuser_id: opt.sysuser_id,
    transName: opt.transName,
    object: opt.object.i18n
  };

  delete opt.object.i18n;

  // Looking for existing transaction
  if (opt.transName)
  {
    // Insert legend class
    wgLegendClass.super_.prototype.insert.call(self,opt,function(err,res)
    {
      if (err)
      {
        callback(err,res);
        return;
      }

      // Insert i18n entry
      manageI18N(i18nInsOpt,"insert",function(i18nErr)
      {
        callback(i18nErr,i18nErr ? null : res);
      });
    });
  }
  else
  {
    // Create transaction
    var transName = "InsertLegendClass_" + new Date().getTime();

    opt.transName = transName;
    i18nInsOpt.transName = transName;

    // Begin transaction
    self.crud.beginTransaction(transName,function(btErr)
    {
      if (btErr)
      {
        callback(btErr,null);
        return;
      }

      // Insert legend class
      wgLegendClass.super_.prototype.insert.call(self,opt,function(err,res)
      {
        if (err)
        {
          self.crud.rollbackTransaction(transName,function(rtErr){});
          callback(err,res);
          return;
        }

        // Insert i18n entry
        manageI18N(i18nInsOpt,"insert",function(i18nErr)
        {
          if (i18nErr)
          {
            self.crud.rollbackTransaction(transName,function(rtErr){});
            callback(i18nErr,null);
            return;
          }

          // Commit transaction
          self.crud.commitTransaction(transName,function(ctErr)
          {
            callback(ctErr,ctErr ? null : res);
          });
        });
      });
    });
  }
}

wgLegendClass.prototype.update = function(opt,callback)
{
  var i18nUpdOpt = {
    sysuser_id: opt.sysuser_id,
    transName: opt.transName,
    object: opt.object.i18n
  };

  delete opt.object.i18n;

  // Looking for existing transaction
  if (opt.transName)
  {
    // Update legend class
    wgLegendClass.super_.prototype.update.call(self,opt,function(err,res)
    {
      if (err)
      {
        callback(err,res);
        return;
      }

      // Update i18n entry
      manageI18N(i18nUpdOpt,"updateWoId",function(i18nErr)
      {
        callback(i18nErr,i18nErr ? null : res);
      });
    });
  }
  else
  {
    // Create transaction
    var transName = "UpdateLegendClass_" + new Date().getTime();

    opt.transName = transName;
    i18nUpdOpt.transName = transName;

    // Begin transaction
    self.crud.beginTransaction(transName,function(btErr)
    {
      if (btErr)
      {
        callback(btErr,null);
        return;
      }

      // Update legend class
      wgLegendClass.super_.prototype.update.call(self,opt,function(err,res)
      {
        if (err)
        {
          self.crud.rollbackTransaction(transName,function(rtErr){});
          callback(err,res);
          return;
        }

        // Update i18n entry
        manageI18N(i18nUpdOpt,"updateWoId",function(i18nErr)
        {
          if (i18nErr)
          {
            self.crud.rollbackTransaction(transName,function(rtErr){});
            callback(i18nErr,null);
            return;
          }

          // Commit transaction
          self.crud.commitTransaction(transName,function(ctErr)
          {
            callback(ctErr,ctErr ? null : res);
          });
        });
      });
    });
  }
}

wgLegendClass.prototype.delete = function(opt,callback)
{
  var i18nDelOpt = {
    sysuser_id: opt.sysuser_id,
    transName: opt.transName
  };

  // Looking for existing transaction
  if (opt.transName)
  {
    // Delete legend class
    wgLegendClass.super_.prototype.delete.call(self,opt,function(err,res)
    {
      if (err)
      {
        callback(err,res);
        return;
      }

      // Delete i18n entry
      i18nDelOpt.object = {label_key: res.result.name};

      manageI18N(i18nDelOpt,"deleteWoId",function(i18nErr)
      {
        callback(i18nErr,i18nErr ? null : res);
      });
    });
  }
  else
  {
    // Create transaction
    var transName = "DeleteLegendClass_" + new Date().getTime();

    opt.transName = transName;
    i18nDelOpt.transName = transName;

    // Begin transaction
    self.crud.beginTransaction(transName,function(btErr)
    {
      if (btErr)
      {
        callback(btErr,null);
        return;
      }

      // Delete legend class
      wgLegendClass.super_.prototype.delete.call(self,opt,function(err,res)
      {
        if (err)
        {
          self.crud.rollbackTransaction(transName,function(rtErr){});
          callback(err,res);
          return;
        }

        // Delete i18n entry
        i18nDelOpt.object = {label_key: res.result.name};

        manageI18N(i18nDelOpt,"deleteWoId",function(i18nErr)
        {
          if (i18nErr)
          {
            self.crud.rollbackTransaction(transName,function(rtErr){});
            callback(i18nErr,null);
            return;
          }

          // Commit transaction
          self.crud.commitTransaction(transName,function(ctErr)
          {
            callback(ctErr,ctErr ? null : res);
          });
        });
      });
    });
  }
}

/*
 * New method.
 */
wgLegendClass.prototype.getConfig = function(opt,callback)
{
  var masterOpt = {object:{ord:"id_legend|ASC;_position|ASC"}};

  self.master(masterOpt,function(err,res)
  {
    if (err)
    {
      callback(err,null);
      return;
    }

    // Process response
    var retObj = {};

    for (var i = 0;i < res.result.length;i++)
    {
      var obj = res.result[i],
        key = obj.id_legend;

      if (!retObj[key])
        retObj[key] = [];

      retObj[key].push(obj);
    }

    callback(null,retObj);
  });
}

wgLegendClass.prototype.image = function(opt,callback)
{
  if (!opt.id)
  {
    callback({message:"Missing legend class id"},null);
    return;
  }

  // Get image form db
  var qOpt = {
    fields: [{name: "image"}],
    from: [{
      schema: self.schemaName,
      name: self.tableName,
      type: self.crudUtils.TABLE
    }],
    where: [{
      typeCond: self.crudUtils.SIMPLE_COND,
      leftSide: "id",
      operator: self.crudUtils.EQ,
      rightSide: "$1"}]
  };
  var qVal = [{value: opt.id}];

  self.crud.select(qOpt,qVal,function(err,res)
  {
    if (err || !res.result || !res.result.length || !res.result[0].image)
    {
      callback(null,null);
      return;
    }

    callback(null,new Buffer(res.result[0].image,"base64"));
  });
}

/*
 * Export.
 */
exports.wgLegendClass = wgLegendClass;

/*
 * Private function.
 */
function manageI18N(opt,method,callback)
{
  if (!opt.object)
  {
    callback(null);
    return;
  }

  // Get i18n entity
  var entity = self.entityHolder.getEntity("i18n");
  if (!entity)
  {
    callback({message:"Cannot retrieve i18n entity"});
    return;
  }

  // Exec
  entity[method](opt,function(err,res)
  {
    callback(err);
  });
}
