/*
 *    Date: 
 *  Author: 
 * Project: 
 *
 * 
 */

var entTemp = require("../../lib/entityTemplate").entityTemplate;
var async = require("async");
var util = require("util");
var self = {};

var wgCategory = function(schema)
{
  wgCategory.super_.call(this);

  this.moduleName = "Entity wgCategory";
  this.entityName = "wgCategory";
  this.schemaName = schema;
  this.tableName = "wg_category";

  this.entityId = "id";
  this.entityIdType = this.crudUtils.INTEGER;

  this.retFieldObj = [{name:"id"},{name:"label"},{name:"permission"}];
}

/*
 * Inheritance.
 */
util.inherits(wgCategory,entTemp);

wgCategory.prototype.init = function(opt)
{
  self = this;
  wgCategory.super_.prototype.init.call(self,opt);
}

wgCategory.prototype.master = function(opt,callback)
{
  var aPerm = opt.object ? opt.object.permLayers : null;

  if (aPerm && aPerm.length)
  {
    /*
     * Get categories for given permissions and without permissions;
     * force query order by _position.
     */
    var aPar = [];
    var qVal = [];

    for (var i = 0;i < aPerm.length;i++)
    {
      aPar.push("$" + (i+1));
      qVal.push({value: aPerm[i]});
    }

    var qOpt = {
      queryName: "wgCategoryForPerm",
      fields: self.crudUtils.ALL_FIELDS,
      from: [{
        schema: self.schemaName,
        name: "view_wg_category",
        type: self.crudUtils.TABLE
      }],
      where: [
        {
          typeCond: self.crudUtils.SIMPLE_COND,
          leftSide: "permission",
          operator: self.crudUtils.IN,
          rightSide: aPar.join(),
          nextCond: self.crudUtils.OR
        },
        {
          typeCond: self.crudUtils.SIMPLE_COND,
          leftSide: "permission",
          operator: self.crudUtils.IS,
          rightSide: self.crudUtils.NULL
        }
      ],
      ordering: [{field:"_position", orderType:self.crudUtils.ASC}]
    };

    self.crud.select(qOpt,qVal,callback);
  }
  else
  {
    /*
     * Get categories without permissions, order by _position.
     */
    var qOpt = {
      fields: self.crudUtils.ALL_FIELDS,
      from: [{
        schema: self.schemaName,
        name: "view_wg_category",
        type: self.crudUtils.TABLE
      }],
      where: [{
        typeCond: self.crudUtils.SIMPLE_COND,
        leftSide: "permission",
        operator: self.crudUtils.IS,
        rightSide: self.crudUtils.NULL
      }],
      ordering: [{field:"_position", orderType:self.crudUtils.ASC}]
    };

    self.crud.select(qOpt,[],callback);
  }
}

wgCategory.prototype.insert = function(opt,callback)
{
  var transOpt = {fake:true, name:opt.transName};

  if (!opt.transName)
  {
    opt.transName = "wgCategoryInsert_" + new Date().getTime();
    transOpt.fake = false;
    transOpt.name = opt.transName;
  }

  // Look for i18n
  var i18nOpt = {
    sysuser_id: opt.sysuser_id,
    transName: opt.transName,
    object: opt.object.i18n
  };

  delete opt.object.i18n;

  // Look for permission
  var permOpt = {
    sysuser_id: opt.sysuser_id,
    transName: opt.transName,
    object: opt.object.permission_obj
  };

  delete opt.object.permission_obj;

  // Look for layers
  var aLayer = opt.object.layers ? opt.object.layers : [];
  var aLayToIns = [];

  for (var i = 0;i < aLayer.length;i++)
    aLayToIns.push({
      sysuser_id: opt.sysuser_id,
      transName: opt.transName,
      sio_id: opt.sio_id,
      method: "insert",
      object: aLayer[i]
    });

  delete opt.object.layers;

  // Function to execute
  var funcObj = {
    insert: function(cb) {wgCategory.super_.prototype.insert.call(self,opt,cb);},
    insI18N: function(cb) {manageI18N(i18nOpt,"insert",cb);},
    insPerm: function(cb) {managePermission(permOpt,cb);},
    insLayer: function(cb) {async.each(aLayToIns,manageLayer,cb);}
  };

  // Begin transaction
  beginTransaction(transOpt,function(btErr)
  {
    if (btErr)
    {
      callback(btErr,null);
      return;
    }

    // Exec function
    async.parallelLimit(funcObj,1,function(err,res)
    {
      if (err)
      {
        rollbackTransaction(transOpt);
        callback(err,null);
      }
      else
      {
        commitTransaction(transOpt,function(ctErr)
        {
          callback(ctErr,ctErr ? null : res.insert);
        });
      }
    });
  });
}

wgCategory.prototype.update = function(opt,callback)
{
  var transOpt = {fake:true, name:opt.transName};

  if (!opt.transName)
  {
    opt.transName = "wgCategoryUpdate_" + new Date().getTime();
    transOpt.fake = false;
    transOpt.name = opt.transName;
  }

  // Look for i18n
  var i18nOpt = {
    sysuser_id: opt.sysuser_id,
    transName: opt.transName,
    object: opt.object.i18n
  };

  delete opt.object.i18n;

  // Look for permission
  var permOpt = {
    sysuser_id: opt.sysuser_id,
    transName: opt.transName,
    object: opt.object.permission_obj
  };

  delete opt.object.permission_obj;

  // Look for layers
  var aLayer = opt.object.layers ? opt.object.layers : [];
  var aLayToMan = [];

  for (var i = 0;i < aLayer.length;i++)
    aLayToMan.push({
      sysuser_id: opt.sysuser_id,
      transName: opt.transName,
      sio_id: opt.sio_id,
      object: aLayer[i],
      method: (aLayer[i].op == "U") ? "update" : "insert"
    });

  delete opt.object.layers;

  // Function to execute
  var funcObj = {
    update: function(cb) {wgCategory.super_.prototype.update.call(self,opt,cb);},
    updI18N: function(cb) {manageI18N(i18nOpt,"updateWoId",cb);},
    updPerm: function(cb) {managePermission(permOpt,cb);},
    manLayer: function(cb) {async.each(aLayToMan,manageLayer,cb);}
  };

  // Begin transaction
  beginTransaction(transOpt,function(btErr)
  {
    if (btErr)
    {
      callback(btErr,null);
      return;
    }

    // Exec function
    async.parallelLimit(funcObj,1,function(err,res)
    {
      if (err)
      {
        rollbackTransaction(transOpt);
        callback(err,null);
      }
      else
      {
        commitTransaction(transOpt,function(ctErr)
        {
          callback(ctErr,ctErr ? null : res.update);
        });
      }
    });
  });
}

wgCategory.prototype.delete = function(opt,callback)
{
  var transOpt = {fake:true, name:opt.transName};

  if (!opt.transName)
  {
    opt.transName = "wgCategoryDelete_" + new Date().getTime();
    transOpt.fake = false;
    transOpt.name = opt.transName;
  }

  // Begin transaction
  beginTransaction(transOpt,function(btErr)
  {
    if (btErr)
    {
      callback(btErr,null);
      return;
    }

    // Get parent layers for given category
    var qVal = [{value: opt.id}];
    var qOpt =
    {
      queryName: "LayersForCat",
      transName: transOpt.name,
      fields: [{name:"id"}],
      from: [{
        schema: self.schemaName,
        name: "wg_layer",
        type:self.crudUtils.TABLE
      }],
      where: [
        {
          typeCond: self.crudUtils.SIMPLE_COND,
          leftSide: "id_category",
          operator: self.crudUtils.EQ,
          rightSide: "$1",
          nextCond: self.crudUtils.AND
        },
        {
          typeCond: self.crudUtils.SIMPLE_COND,
          leftSide: "id_parent",
          operator: self.crudUtils.IS,
          rightSide: self.crudUtils.NULL
        }
      ]
    };

    self.crud.select(qOpt,qVal,function(layErr,layRes)
    {
      if (layErr)
      {
        rollbackTransaction(transOpt);
        callback(layErr,null);
        return;
      }

      // Delete retrieve layers
      var aToDel = [];

      for (var i = 0;i < layRes.result.length;i++)
        aToDel.push({
          sysuser_id: opt.sysuser_id,
          transName: opt.transName,
          sio_id: opt.sio_id,
          method: "delete",
          object: opt.object,
          id: layRes.result[i].id
        });

      async.each(aToDel,manageLayer,function(delLayErr)
      {
        if (delLayErr)
        {
          rollbackTransaction(transOpt);
          callback(delLayErr,null);
          return;
        }

        // Delete category
        wgCategory.super_.prototype.delete.call(self,opt,function(err,res)
        {
          if (err)
          {
            rollbackTransaction(transOpt);
            callback(err,null);
            return;
          }

          // Delete i18n entry (only if simple param is false or null)
          var i18nOpt = {
            sysuser_id: opt.sysuser_id,
            transName: opt.transName,
            sio_id: opt.sio_id,
            object: opt.object.simple ? null : {label_key: res.result.label}
          };

          manageI18N(i18nOpt,"deleteWoId",function(i18nErr)
          {
            if (i18nErr)
            {
              rollbackTransaction(transOpt);
              callback(i18nErr,null);
              return;
            }

            if (!res.result.permission)
            {
              commitTransaction(transOpt,function(ctErr)
              {
                callback(ctErr,ctErr ? null : res);
              });
              return;
            }

            // Delete permission
            var permOpt = {
              sysuser_id: opt.sysuser_id,
              transName: opt.transName,
              object: {op:"D", name:res.result.permission}
            };

            managePermission(permOpt,function(permErr)
            {
              if (permErr)
              {
                rollbackTransaction(transOpt);
                callback(permErr,null);
              }
              else
              {
                commitTransaction(transOpt,function(ctErr)
                {
                  callback(ctErr,ctErr ? null : res);
                });
              }
            });
          });
        });
      });
    });
  });
}

/*
 * New method.
 */
wgCategory.prototype.getConfig = function(opt,callback)
{
  // Add custom order to option
  if (!opt.object)
    opt.object = {};

  opt.object.ord = "_position|ASC";

  /* Load master */
  self.master(opt,function(err,res)
  {
    if (err)
    {
      callback(err,null);
      return;
    }

    // Remove custom order
    delete opt.object.ord;

    /* Get layers config */
    var layEnt = self.entityHolder.getEntity("wgLayer");
    if (!layEnt)
    {
      callback({mesage:"Cannot retrieve wgLayer entity"},null);
    }

    layEnt.getConfig(opt,function(layErr,layRes)
    {
      // Ignore error
      if (!layRes)
        layRes = {};

      /* Prepare response */
      var retObj = [];

      for (var i = 0;i < res.result.length;i++)
      {
        var obj = res.result[i];

        // Add layers to category
        if (layRes[obj.id])
          obj.layers = layRes[obj.id];

        // Add category to retObj
        retObj.push(obj);
      }

      callback(null,retObj);
    });
  });
}

wgCategory.prototype.bulkUpdate = function(opt,callback)
{
  // NOTE: with this method cannot update i18n entry
  var transName = "BulkUpdateCategory_" + new Date().getTime();
  var aObject = [];

  for (var i = 0;i < opt.object.length;i++)
  {
    aObject.push({
      sysuser_id: opt.sysuser_id,
      transName: transName,
      object: opt.object[i],
      id: opt.object[i].id
    });

    delete opt.object[i].id;
  }

  // Begin transaction
  self.crud.beginTransaction(transName,function(btErr)
  {
    if (btErr)
    {
      callback(btErr,null);
      return;
    }

    // Update
    async.each(aObject,function(obj,cb)
    {
      wgCategory.super_.prototype.update.call(self,obj,function(err,res)
      {
        cb(err);
      });
    },
    function(err)
    {
      if (err)
      {
        self.crud.rollbackTransaction(transName,function(rtErr){});
        callback(err,null);
        return;
      }

      // Commit transaction
      self.crud.commitTransaction(transName,function(ctErr)
      {
        callback(ctErr,ctErr ? null : {result: {}});
      });
    });
  });
}

/*
 * Export.
 */
exports.wgCategory = wgCategory;

/*
 * Private function.
 */
function manageI18N(opt,method,callback)
{
  if (!opt.object || !opt.object.label_key)
  {
    callback(null);
    return;
  }

  // Get i18n entity
  var entity = self.entityHolder.getEntity("i18n");
  if (!entity)
  {
    callback({message:"Cannot retrieve i18n entity"});
    return;
  }

  // Exec
  entity[method](opt,function(err,res)
  {
    callback(err);
  });
}

function managePermission(opt,callback)
{
  if (!opt.object)
  {
    callback(null);
    return;
  }

  // Get entity and method
  var entity = self.entityHolder.getEntity("permission");
  var method = null;

  switch (opt.object.op)
  {
    case "I":
      opt.object.app_desc = "Layer gis";
      opt.object.app_name = "webgis";
      method = "insert";
      break;
    case "U": method = "updateByName"; break;
    case "D": method = "deleteByName"; break;
  }

  delete opt.object.op;

  if (!entity || !method)
  {
    callback({message:"Cannot retrieve permission entity/method"});
    return;
  }

  // Exec
  entity[method](opt,function(err,res)
  {
    callback(err);
  });
}

function manageLayer(opt,callback)
{
  var entity = self.entityHolder.getEntity("wgLayer");
  var method = opt.method;

  if (!entity)
  {
    callback({message:"Cannot retrieve wgLayer entity"});
    return;
  }

  // Exec method
  entity[method](opt,function(err,res)
  {
    callback(err);
  });
}

function beginTransaction(opt,callback)
{
  if (opt.fake)
    callback(null);
  else
    self.crud.beginTransaction(opt.name,callback);
}

function commitTransaction(opt,callback)
{
  if (opt.fake)
    callback(null);
  else
    self.crud.commitTransaction(opt.name,callback);
}

function rollbackTransaction(opt)
{
  if (!opt.fake)
    self.crud.rollbackTransaction(opt.name,function(err){});
}
